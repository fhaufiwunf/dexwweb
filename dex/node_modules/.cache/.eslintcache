[{"D:\\Code\\DEX\\dexwweb\\dex\\src\\index.js":"1","D:\\Code\\DEX\\dexwweb\\dex\\src\\App.js":"2","D:\\Code\\DEX\\dexwweb\\dex\\src\\Frontend\\components\\Swap.js":"3","D:\\Code\\DEX\\dexwweb\\dex\\src\\Frontend\\components\\Header.js":"4","D:\\Code\\DEX\\dexwweb\\dex\\src\\Frontend\\components\\Pool.js":"5"},{"size":748,"mtime":1717945453704,"results":"6","hashOfConfig":"7"},{"size":922,"mtime":1718123963757,"results":"8","hashOfConfig":"7"},{"size":3749,"mtime":1718123963795,"results":"9","hashOfConfig":"7"},{"size":978,"mtime":1717944843744,"results":"10","hashOfConfig":"7"},{"size":110,"mtime":1717940937927,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r0w0p7",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Code\\DEX\\dexwweb\\dex\\src\\index.js",[],[],"D:\\Code\\DEX\\dexwweb\\dex\\src\\App.js",[],[],"D:\\Code\\DEX\\dexwweb\\dex\\src\\Frontend\\components\\Swap.js",["28","29","30"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Input, Popover, Radio, Modal, message } from \"antd\";\r\nimport {\r\n  AccountBookOutlined,\r\n  DownOutlined,\r\n  SettingOutlined,\r\n} from \"@ant-design/icons\";\r\nimport tokenList from \"../../tokenList.json\";\r\n\r\nfunction Swap() {\r\n  const [Slippage, setSlippage] = useState(2.5);\r\n  const [tokenOneAmount, setTokenOneAmount] = useState(null);\r\n  const [tokenTwoAmount, setTokentwoAmount] = useState(null);\r\n  const [tokenOne, setTokenOne] = useState(tokenList[0]);\r\n  const [tokenTwo, setTokenTwo] = useState(tokenList[1]);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [changeToken, setChangeToken] = useState(1);\r\n\r\n  function handleSlippageChange(e) {\r\n    setSlippage(e.target.value);\r\n  }\r\n\r\n  function changeAmount(e) {\r\n    setTokenOneAmount(e.target.value);\r\n  }\r\n\r\n  function switchToken() {\r\n    const one = tokenOne;\r\n    const two = tokenTwo;\r\n    setTokenOne(two);\r\n    setTokenTwo(one);\r\n  }\r\n\r\n  function openModal(asset) {\r\n    setChangeToken(asset);\r\n    setIsOpen(true);\r\n  }\r\n\r\n  function modifyToken(i) {\r\n    if (changeToken === 1) {\r\n      setTokenOne(tokenList[i]);\r\n    } else {\r\n      setTokenTwo(tokenList[i]);\r\n    }\r\n    setIsOpen(false);\r\n  }\r\n\r\n  const settings = (\r\n    <>\r\n      <div>Slippage Tolerance</div>\r\n      <div>\r\n        <Radio.Group value={Slippage} onChange={handleSlippageChange}>\r\n          <Radio.Button value={0.5}>0.5%</Radio.Button>\r\n          <Radio.Button value={2.5}>2.5%</Radio.Button>\r\n          <Radio.Button value={5}>5.0%</Radio.Button>\r\n        </Radio.Group>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        open={isOpen}\r\n        footer={null}\r\n        onCancel={() => setIsOpen(false)}\r\n        title=\"Select a token\"\r\n      >\r\n        <div className=\"modalContent\">\r\n          {tokenList?.map((e, i) => {\r\n            return (\r\n              <div\r\n                className=\"tokenChoice\"\r\n                key={i}\r\n                onClick={() => modifyToken(i)}\r\n              >\r\n                <img src={e.img} alt={e.ticker} className=\"tokenLogo\" />\r\n                <div className=\"tokenChoiceName\">\r\n                  <div className=\"tokenName\">{e.name}</div>\r\n                  <div className=\"tokenTicker\">{e.ticker}</div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </Modal>\r\n      <div className=\"tradeBox\">\r\n        <div className=\"tradeBoxHeader\">\r\n          <h4>swap</h4>\r\n          <Popover\r\n            content={settings}\r\n            title=\"setting\"\r\n            trigger=\"click\"\r\n            placement=\"bottomRight\"\r\n          >\r\n            <SettingOutlined className=\"cog\" />\r\n          </Popover>\r\n        </div>\r\n        <div className=\"inputs\">\r\n          <Input\r\n            placeholder=\"0\"\r\n            value={tokenOneAmount}\r\n            onChange={changeAmount}\r\n          />\r\n          <Input placeholder=\"0\" value={tokenTwoAmount} disabled={true} />\r\n          <div className=\"switchButton\" onClick={switchToken}>\r\n            <AccountBookOutlined className=\"switchArrow\" />\r\n          </div>\r\n          <div className=\"assetOne\" onClick={() => openModal(1)}>\r\n            <img src={tokenOne.img} alt=\"assetOneLogo\" className=\"assetLogo\" />\r\n            {tokenOne.ticker}\r\n            <DownOutlined />\r\n          </div>\r\n          <div className=\"assetTwo\" onClick={() => openModal(2)}>\r\n            <img src={tokenTwo.img} alt=\"assetOneLogo\" className=\"assetLogo\" />\r\n            {tokenTwo.ticker}\r\n            <DownOutlined />\r\n          </div>\r\n        </div>\r\n        <div className=\"swapButton\" disabled={!tokenOneAmount}>\r\n          swap\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","D:\\Code\\DEX\\dexwweb\\dex\\src\\Frontend\\components\\Header.js",[],[],"D:\\Code\\DEX\\dexwweb\\dex\\src\\Frontend\\components\\Pool.js",[],[],{"ruleId":"31","severity":1,"message":"32","line":1,"column":27,"nodeType":"33","messageId":"34","endLine":1,"endColumn":36},{"ruleId":"31","severity":1,"message":"35","line":2,"column":40,"nodeType":"33","messageId":"34","endLine":2,"endColumn":47},{"ruleId":"31","severity":1,"message":"36","line":13,"column":26,"nodeType":"33","messageId":"34","endLine":13,"endColumn":43},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'message' is defined but never used.","'setTokentwoAmount' is assigned a value but never used."]