{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _PatternVisitor_rootPattern, _PatternVisitor_callback, _PatternVisitor_assignments, _PatternVisitor_restElements;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PatternVisitor = void 0;\nconst types_1 = require(\"@typescript-eslint/types\");\nconst VisitorBase_1 = require(\"./VisitorBase\");\nclass PatternVisitor extends VisitorBase_1.VisitorBase {\n  static isPattern(node) {\n    const nodeType = node.type;\n    return nodeType === types_1.AST_NODE_TYPES.Identifier || nodeType === types_1.AST_NODE_TYPES.ObjectPattern || nodeType === types_1.AST_NODE_TYPES.ArrayPattern || nodeType === types_1.AST_NODE_TYPES.SpreadElement || nodeType === types_1.AST_NODE_TYPES.RestElement || nodeType === types_1.AST_NODE_TYPES.AssignmentPattern;\n  }\n  constructor(options, rootPattern, callback) {\n    super(options);\n    _PatternVisitor_rootPattern.set(this, void 0);\n    _PatternVisitor_callback.set(this, void 0);\n    _PatternVisitor_assignments.set(this, []);\n    this.rightHandNodes = [];\n    _PatternVisitor_restElements.set(this, []);\n    __classPrivateFieldSet(this, _PatternVisitor_rootPattern, rootPattern, \"f\");\n    __classPrivateFieldSet(this, _PatternVisitor_callback, callback, \"f\");\n  }\n  ArrayExpression(node) {\n    node.elements.forEach(this.visit, this);\n  }\n  ArrayPattern(pattern) {\n    for (const element of pattern.elements) {\n      this.visit(element);\n    }\n  }\n  AssignmentExpression(node) {\n    __classPrivateFieldGet(this, _PatternVisitor_assignments, \"f\").push(node);\n    this.visit(node.left);\n    this.rightHandNodes.push(node.right);\n    __classPrivateFieldGet(this, _PatternVisitor_assignments, \"f\").pop();\n  }\n  AssignmentPattern(pattern) {\n    __classPrivateFieldGet(this, _PatternVisitor_assignments, \"f\").push(pattern);\n    this.visit(pattern.left);\n    this.rightHandNodes.push(pattern.right);\n    __classPrivateFieldGet(this, _PatternVisitor_assignments, \"f\").pop();\n  }\n  CallExpression(node) {\n    // arguments are right hand nodes.\n    node.arguments.forEach(a => {\n      this.rightHandNodes.push(a);\n    });\n    this.visit(node.callee);\n  }\n  Decorator() {\n    // don't visit any decorators when exploring a pattern\n  }\n  Identifier(pattern) {\n    var _a;\n    const lastRestElement = (_a = __classPrivateFieldGet(this, _PatternVisitor_restElements, \"f\")[__classPrivateFieldGet(this, _PatternVisitor_restElements, \"f\").length - 1]) !== null && _a !== void 0 ? _a : null;\n    __classPrivateFieldGet(this, _PatternVisitor_callback, \"f\").call(this, pattern, {\n      topLevel: pattern === __classPrivateFieldGet(this, _PatternVisitor_rootPattern, \"f\"),\n      rest: lastRestElement != null && lastRestElement.argument === pattern,\n      assignments: __classPrivateFieldGet(this, _PatternVisitor_assignments, \"f\")\n    });\n  }\n  MemberExpression(node) {\n    // Computed property's key is a right hand node.\n    if (node.computed) {\n      this.rightHandNodes.push(node.property);\n    }\n    // the object is only read, write to its property.\n    this.rightHandNodes.push(node.object);\n  }\n  Property(property) {\n    // Computed property's key is a right hand node.\n    if (property.computed) {\n      this.rightHandNodes.push(property.key);\n    }\n    // If it's shorthand, its key is same as its value.\n    // If it's shorthand and has its default value, its key is same as its value.left (the value is AssignmentPattern).\n    // If it's not shorthand, the name of new variable is its value's.\n    this.visit(property.value);\n  }\n  RestElement(pattern) {\n    __classPrivateFieldGet(this, _PatternVisitor_restElements, \"f\").push(pattern);\n    this.visit(pattern.argument);\n    __classPrivateFieldGet(this, _PatternVisitor_restElements, \"f\").pop();\n  }\n  SpreadElement(node) {\n    this.visit(node.argument);\n  }\n  TSTypeAnnotation() {\n    // we don't want to visit types\n  }\n}\nexports.PatternVisitor = PatternVisitor;\n_PatternVisitor_rootPattern = new WeakMap(), _PatternVisitor_callback = new WeakMap(), _PatternVisitor_assignments = new WeakMap(), _PatternVisitor_restElements = new WeakMap();","map":{"version":3,"mappings":"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","names":["PatternVisitor","VisitorBase_1","isPattern","node","nodeType","type","types_1","Identifier","ObjectPattern","ArrayPattern","SpreadElement","RestElement","AssignmentPattern","constructor","options","rootPattern","callback","_PatternVisitor_rootPattern","_PatternVisitor_callback","_PatternVisitor_assignments","_PatternVisitor_restElements","__classPrivateFieldSet","ArrayExpression","elements","forEach","visit","pattern","element","AssignmentExpression","__classPrivateFieldGet","push","left","rightHandNodes","right","pop","CallExpression","arguments","a","callee","Decorator","lastRestElement","length","topLevel","rest","argument","assignments","MemberExpression","computed","property","object","Property","key","value","TSTypeAnnotation","exports"],"sources":["../../src/referencer/PatternVisitor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}