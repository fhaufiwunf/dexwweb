{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n  detectNetwork() {\n    const _super = Object.create(null, {\n      detectNetwork: {\n        get: () => super.detectNetwork\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      let network = this.network;\n      if (network == null) {\n        network = yield _super.detectNetwork.call(this);\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        }\n        // If still not set, set it\n        if (this._network == null) {\n          // A static network does not support \"any\"\n          defineReadOnly(this, \"_network\", network);\n          this.emit(\"network\", network, null);\n        }\n      }\n      return network;\n    });\n  }\n}\nexport class UrlJsonRpcProvider extends StaticJsonRpcProvider {\n  constructor(network, apiKey) {\n    logger.checkAbstract(new.target, UrlJsonRpcProvider);\n    // Normalize the Network and API Key\n    network = getStatic(new.target, \"getNetwork\")(network);\n    apiKey = getStatic(new.target, \"getApiKey\")(apiKey);\n    const connection = getStatic(new.target, \"getUrl\")(network, apiKey);\n    super(connection, network);\n    if (typeof apiKey === \"string\") {\n      defineReadOnly(this, \"apiKey\", apiKey);\n    } else if (apiKey != null) {\n      Object.keys(apiKey).forEach(key => {\n        defineReadOnly(this, key, apiKey[key]);\n      });\n    }\n  }\n  _startPending() {\n    logger.warn(\"WARNING: API provider does not support pending filters\");\n  }\n  isCommunityResource() {\n    return false;\n  }\n  getSigner(address) {\n    return logger.throwError(\"API provider does not support signing\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"getSigner\"\n    });\n  }\n  listAccounts() {\n    return Promise.resolve([]);\n  }\n  // Return a defaultApiKey if null, otherwise validate the API key\n  static getApiKey(apiKey) {\n    return apiKey;\n  }\n  // Returns the url or connection for the given network and API key. The\n  // API key will have been sanitized by the getApiKey first, so any validation\n  // or transformations can be done there.\n  static getUrl(network, apiKey) {\n    return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: \"getUrl\"\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGZ,SAASA,cAAc,EAAEC,SAAS,QAAQ,2BAA2B;AAGrE,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAGlC,SAASE,eAAe,QAAuB,qBAAqB;AAIpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAM,MAAOC,qBAAsB,SAAQD,eAAe;EAChDE,aAAaA;;;;;;;MACf,IAAIC,OAAO,GAAG,IAAI,CAACA,OAAO;MAC1B,IAAIA,OAAO,IAAI,IAAI,EAAE;QACjBA,OAAO,GAAG,MAAMC,OAAMF,aAAa,WAAE;QAErC,IAAI,CAACC,OAAO,EAAE;UACVJ,MAAM,CAACM,UAAU,CAAC,qBAAqB,EAAER,MAAM,CAACS,MAAM,CAACC,aAAa,EAAE,EAAG,CAAC;;QAG9E;QACA,IAAI,IAAI,CAACC,QAAQ,IAAI,IAAI,EAAE;UACvB;UACAb,cAAc,CAAC,IAAI,EAAE,UAAU,EAAEQ,OAAO,CAAC;UAEzC,IAAI,CAACM,IAAI,CAAC,SAAS,EAAEN,OAAO,EAAE,IAAI,CAAC;;;MAG3C,OAAOA,OAAO;IAClB,CAAC;;;AAGL,OAAM,MAAgBO,kBAAmB,SAAQT,qBAAqB;EAGlEU,YAAYR,OAAoB,EAAES,MAAY;IAC1Cb,MAAM,CAACc,aAAa,CAACC,GAAG,CAACC,MAAM,EAAEL,kBAAkB,CAAC;IAEpD;IACAP,OAAO,GAAGP,SAAS,CAAmCkB,GAAG,CAACC,MAAM,EAAE,YAAY,CAAC,CAACZ,OAAO,CAAC;IACxFS,MAAM,GAAGhB,SAAS,CAA6BkB,GAAG,CAACC,MAAM,EAAE,WAAW,CAAC,CAACH,MAAM,CAAC;IAE/E,MAAMI,UAAU,GAAGpB,SAAS,CAAakB,GAAG,CAACC,MAAM,EAAE,QAAQ,CAAC,CAACZ,OAAO,EAAES,MAAM,CAAC;IAE/E,KAAK,CAACI,UAAU,EAAEb,OAAO,CAAC;IAE1B,IAAI,OAAOS,MAAO,KAAK,QAAQ,EAAE;MAC7BjB,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAEiB,MAAM,CAAC;KACzC,MAAM,IAAIA,MAAM,IAAI,IAAI,EAAE;MACvBK,MAAM,CAACC,IAAI,CAACN,MAAM,CAAC,CAACO,OAAO,CAAEC,GAAG,IAAI;QAChCzB,cAAc,CAAW,IAAI,EAAEyB,GAAG,EAAER,MAAM,CAACQ,GAAG,CAAC,CAAC;MACpD,CAAC,CAAC;;EAEV;EAEAC,aAAaA;IACTtB,MAAM,CAACuB,IAAI,CAAC,wDAAwD,CAAC;EACzE;EAEAC,mBAAmBA;IACf,OAAO,KAAK;EAChB;EAEAC,SAASA,CAACC,OAAgB;IACtB,OAAO1B,MAAM,CAACM,UAAU,CACpB,uCAAuC,EACvCR,MAAM,CAACS,MAAM,CAACoB,qBAAqB,EACnC;MAAEC,SAAS,EAAE;IAAW,CAAE,CAC7B;EACL;EAEAC,YAAYA;IACR,OAAOC,OAAO,CAACC,OAAO,CAAC,EAAE,CAAC;EAC9B;EAEA;EACA,OAAOC,SAASA,CAACnB,MAAW;IACxB,OAAOA,MAAM;EACjB;EAEA;EACA;EACA;EACA,OAAOoB,MAAMA,CAAC7B,OAAgB,EAAES,MAAW;IACvC,OAAOb,MAAM,CAACM,UAAU,CAAC,mDAAmD,EAAER,MAAM,CAACS,MAAM,CAAC2B,eAAe,EAAE;MACzGN,SAAS,EAAE;KACd,CAAC;EACN","names":["defineReadOnly","getStatic","Logger","version","logger","JsonRpcProvider","StaticJsonRpcProvider","detectNetwork","network","_super","throwError","errors","UNKNOWN_ERROR","_network","emit","UrlJsonRpcProvider","constructor","apiKey","checkAbstract","new","target","connection","Object","keys","forEach","key","_startPending","warn","isCommunityResource","getSigner","address","UNSUPPORTED_OPERATION","operation","listAccounts","Promise","resolve","getApiKey","getUrl","NOT_IMPLEMENTED"],"sources":["D:\\Code\\DEX\\dexwweb\\dex\\node_modules\\@ethersproject\\providers\\src.ts\\url-json-rpc-provider.ts"],"sourcesContent":["\r\n\"use strict\";\r\n\r\nimport { Network, Networkish } from \"@ethersproject/networks\";\r\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\r\nimport { ConnectionInfo } from \"@ethersproject/web\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\nimport { CommunityResourcable } from \"./formatter\";\r\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\r\n\r\ntype getUrlFunc = (network: Network, apiKey: string) => string | ConnectionInfo;\r\n\r\n// A StaticJsonRpcProvider is useful when you *know* for certain that\r\n// the backend will never change, as it never calls eth_chainId to\r\n// verify its backend. However, if the backend does change, the effects\r\n// are undefined and may include:\r\n// - inconsistent results\r\n// - locking up the UI\r\n// - block skew warnings\r\n// - wrong results\r\n// If the network is not explicit (i.e. auto-detection is expected), the\r\n// node MUST be running and available to respond to requests BEFORE this\r\n// is instantiated.\r\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\r\n    async detectNetwork(): Promise<Network> {\r\n        let network = this.network;\r\n        if (network == null) {\r\n            network = await super.detectNetwork();\r\n\r\n            if (!network) {\r\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\r\n            }\r\n\r\n            // If still not set, set it\r\n            if (this._network == null) {\r\n                // A static network does not support \"any\"\r\n                defineReadOnly(this, \"_network\", network);\r\n\r\n                this.emit(\"network\", network, null);\r\n            }\r\n        }\r\n        return network;\r\n    }\r\n}\r\n\r\nexport abstract class UrlJsonRpcProvider extends StaticJsonRpcProvider implements CommunityResourcable {\r\n    readonly apiKey: any;\r\n\r\n    constructor(network?: Networkish, apiKey?: any) {\r\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\r\n\r\n        // Normalize the Network and API Key\r\n        network = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\r\n        apiKey = getStatic<(apiKey: string) => string>(new.target, \"getApiKey\")(apiKey);\r\n\r\n        const connection = getStatic<getUrlFunc>(new.target, \"getUrl\")(network, apiKey);\r\n\r\n        super(connection, network);\r\n\r\n        if (typeof(apiKey) === \"string\") {\r\n            defineReadOnly(this, \"apiKey\", apiKey);\r\n        } else if (apiKey != null) {\r\n            Object.keys(apiKey).forEach((key) => {\r\n                defineReadOnly<any, any>(this, key, apiKey[key]);\r\n            });\r\n        }\r\n    }\r\n\r\n    _startPending(): void {\r\n        logger.warn(\"WARNING: API provider does not support pending filters\");\r\n    }\r\n\r\n    isCommunityResource(): boolean {\r\n        return false;\r\n    }\r\n\r\n    getSigner(address?: string): JsonRpcSigner {\r\n        return logger.throwError(\r\n            \"API provider does not support signing\",\r\n            Logger.errors.UNSUPPORTED_OPERATION,\r\n            { operation: \"getSigner\" }\r\n        );\r\n    }\r\n\r\n    listAccounts(): Promise<Array<string>> {\r\n        return Promise.resolve([]);\r\n    }\r\n\r\n    // Return a defaultApiKey if null, otherwise validate the API key\r\n    static getApiKey(apiKey: any): any {\r\n        return apiKey;\r\n    }\r\n\r\n    // Returns the url or connection for the given network and API key. The\r\n    // API key will have been sanitized by the getApiKey first, so any validation\r\n    // or transformations can be done there.\r\n    static getUrl(network: Network, apiKey: any): string | ConnectionInfo {\r\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\r\n            operation: \"getUrl\"\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}