{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProjectProgram = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst ts = __importStar(require(\"typescript\"));\nconst node_utils_1 = require(\"../node-utils\");\nconst describeFilePath_1 = require(\"./describeFilePath\");\nconst getWatchProgramsForProjects_1 = require(\"./getWatchProgramsForProjects\");\nconst shared_1 = require(\"./shared\");\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:createProjectProgram');\nconst DEFAULT_EXTRA_FILE_EXTENSIONS = [ts.Extension.Ts, ts.Extension.Tsx, ts.Extension.Js, ts.Extension.Jsx, ts.Extension.Mjs, ts.Extension.Mts, ts.Extension.Cjs, ts.Extension.Cts];\n/**\n * @param parseSettings Internal settings for parsing the file\n * @returns If found, the source file corresponding to the code and the containing program\n */\nfunction createProjectProgram(parseSettings) {\n  log('Creating project program for: %s', parseSettings.filePath);\n  const programsForProjects = (0, getWatchProgramsForProjects_1.getWatchProgramsForProjects)(parseSettings);\n  const astAndProgram = (0, node_utils_1.firstDefined)(programsForProjects, currentProgram => (0, shared_1.getAstFromProgram)(currentProgram, parseSettings));\n  // The file was either matched within the tsconfig, or we allow creating a default program\n  if (astAndProgram || parseSettings.createDefaultProgram) {\n    return astAndProgram;\n  }\n  const describeProjectFilePath = projectFile => (0, describeFilePath_1.describeFilePath)(projectFile, parseSettings.tsconfigRootDir);\n  const describedFilePath = (0, describeFilePath_1.describeFilePath)(parseSettings.filePath, parseSettings.tsconfigRootDir);\n  const relativeProjects = parseSettings.projects.map(describeProjectFilePath);\n  const describedPrograms = relativeProjects.length === 1 ? relativeProjects[0] : `\\n${relativeProjects.map(project => `- ${project}`).join('\\n')}`;\n  const errorLines = [`ESLint was configured to run on \\`${describedFilePath}\\` using \\`parserOptions.project\\`: ${describedPrograms}`];\n  let hasMatchedAnError = false;\n  const extraFileExtensions = parseSettings.extraFileExtensions || [];\n  extraFileExtensions.forEach(extraExtension => {\n    if (!extraExtension.startsWith('.')) {\n      errorLines.push(`Found unexpected extension \\`${extraExtension}\\` specified with the \\`parserOptions.extraFileExtensions\\` option. Did you mean \\`.${extraExtension}\\`?`);\n    }\n    if (DEFAULT_EXTRA_FILE_EXTENSIONS.includes(extraExtension)) {\n      errorLines.push(`You unnecessarily included the extension \\`${extraExtension}\\` with the \\`parserOptions.extraFileExtensions\\` option. This extension is already handled by the parser by default.`);\n    }\n  });\n  const fileExtension = path_1.default.extname(parseSettings.filePath);\n  if (!DEFAULT_EXTRA_FILE_EXTENSIONS.includes(fileExtension)) {\n    const nonStandardExt = `The extension for the file (\\`${fileExtension}\\`) is non-standard`;\n    if (extraFileExtensions.length > 0) {\n      if (!extraFileExtensions.includes(fileExtension)) {\n        errorLines.push(`${nonStandardExt}. It should be added to your existing \\`parserOptions.extraFileExtensions\\`.`);\n        hasMatchedAnError = true;\n      }\n    } else {\n      errorLines.push(`${nonStandardExt}. You should add \\`parserOptions.extraFileExtensions\\` to your config.`);\n      hasMatchedAnError = true;\n    }\n  }\n  if (!hasMatchedAnError) {\n    const [describedInclusions, describedSpecifiers] = parseSettings.projects.length === 1 ? ['that TSConfig does not', 'that TSConfig'] : ['none of those TSConfigs', 'one of those TSConfigs'];\n    errorLines.push(`However, ${describedInclusions} include this file. Either:`, `- Change ESLint's list of included files to not include this file`, `- Change ${describedSpecifiers} to include this file`, `- Create a new TSConfig that includes this file and include it in your parserOptions.project`, `See the typescript-eslint docs for more info: https://typescript-eslint.io/linting/troubleshooting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file`);\n  }\n  throw new Error(errorLines.join('\\n'));\n}\nexports.createProjectProgram = createProjectProgram;","map":{"version":3,"mappings":"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","names":["log","DEFAULT_EXTRA_FILE_EXTENSIONS","ts","Extension","Ts","Tsx","Js","Jsx","Mjs","Mts","Cjs","Cts","createProjectProgram","parseSettings","filePath","programsForProjects","astAndProgram","currentProgram","createDefaultProgram","describeProjectFilePath","projectFile","tsconfigRootDir","describedFilePath","relativeProjects","projects","map","describedPrograms","length","project","join","errorLines","hasMatchedAnError","extraFileExtensions","forEach","extraExtension","startsWith","push","includes","fileExtension","path_1","extname","nonStandardExt","describedInclusions","describedSpecifiers","Error","exports"],"sources":["../../src/create-program/createProjectProgram.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}