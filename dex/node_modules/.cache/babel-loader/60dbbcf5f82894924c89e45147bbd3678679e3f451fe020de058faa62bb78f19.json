{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _ScopeManager_options;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScopeManager = void 0;\nconst assert_1 = require(\"./assert\");\nconst scope_1 = require(\"./scope\");\nconst ClassFieldInitializerScope_1 = require(\"./scope/ClassFieldInitializerScope\");\nconst ClassStaticBlockScope_1 = require(\"./scope/ClassStaticBlockScope\");\nclass ScopeManager {\n  get variables() {\n    const variables = new Set();\n    function recurse(scope) {\n      scope.variables.forEach(v => variables.add(v));\n      scope.childScopes.forEach(recurse);\n    }\n    this.scopes.forEach(recurse);\n    return Array.from(variables).sort((a, b) => a.$id - b.$id);\n  }\n  constructor(options) {\n    _ScopeManager_options.set(this, void 0);\n    this.scopes = [];\n    this.globalScope = null;\n    this.nodeToScope = new WeakMap();\n    this.currentScope = null;\n    __classPrivateFieldSet(this, _ScopeManager_options, options, \"f\");\n    this.declaredVariables = new WeakMap();\n  }\n  isGlobalReturn() {\n    return __classPrivateFieldGet(this, _ScopeManager_options, \"f\").globalReturn === true;\n  }\n  isModule() {\n    return __classPrivateFieldGet(this, _ScopeManager_options, \"f\").sourceType === 'module';\n  }\n  isImpliedStrict() {\n    return __classPrivateFieldGet(this, _ScopeManager_options, \"f\").impliedStrict === true;\n  }\n  isStrictModeSupported() {\n    return __classPrivateFieldGet(this, _ScopeManager_options, \"f\").ecmaVersion != null && __classPrivateFieldGet(this, _ScopeManager_options, \"f\").ecmaVersion >= 5;\n  }\n  isES6() {\n    return __classPrivateFieldGet(this, _ScopeManager_options, \"f\").ecmaVersion != null && __classPrivateFieldGet(this, _ScopeManager_options, \"f\").ecmaVersion >= 6;\n  }\n  /**\n   * Get the variables that a given AST node defines. The gotten variables' `def[].node`/`def[].parent` property is the node.\n   * If the node does not define any variable, this returns an empty array.\n   * @param node An AST node to get their variables.\n   * @public\n   */\n  getDeclaredVariables(node) {\n    var _a;\n    return (_a = this.declaredVariables.get(node)) !== null && _a !== void 0 ? _a : [];\n  }\n  /**\n   * Get the scope of a given AST node. The gotten scope's `block` property is the node.\n   * This method never returns `function-expression-name` scope. If the node does not have their scope, this returns `null`.\n   *\n   * @param node An AST node to get their scope.\n   * @param inner If the node has multiple scopes, this returns the outermost scope normally.\n   *                If `inner` is `true` then this returns the innermost scope.\n   * @public\n   */\n  acquire(node) {\n    let inner = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var _a;\n    function predicate(testScope) {\n      if (testScope.type === 'function' && testScope.functionExpressionScope) {\n        return false;\n      }\n      return true;\n    }\n    const scopes = this.nodeToScope.get(node);\n    if (!scopes || scopes.length === 0) {\n      return null;\n    }\n    // Heuristic selection from all scopes.\n    // If you would like to get all scopes, please use ScopeManager#acquireAll.\n    if (scopes.length === 1) {\n      return scopes[0];\n    }\n    if (inner) {\n      for (let i = scopes.length - 1; i >= 0; --i) {\n        const scope = scopes[i];\n        if (predicate(scope)) {\n          return scope;\n        }\n      }\n      return null;\n    }\n    return (_a = scopes.find(predicate)) !== null && _a !== void 0 ? _a : null;\n  }\n  nestScope(scope) {\n    if (scope instanceof scope_1.GlobalScope) {\n      (0, assert_1.assert)(this.currentScope == null);\n      this.globalScope = scope;\n    }\n    this.currentScope = scope;\n    return scope;\n  }\n  nestBlockScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.BlockScope(this, this.currentScope, node));\n  }\n  nestCatchScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.CatchScope(this, this.currentScope, node));\n  }\n  nestClassScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.ClassScope(this, this.currentScope, node));\n  }\n  nestClassFieldInitializerScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new ClassFieldInitializerScope_1.ClassFieldInitializerScope(this, this.currentScope, node));\n  }\n  nestClassStaticBlockScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new ClassStaticBlockScope_1.ClassStaticBlockScope(this, this.currentScope, node));\n  }\n  nestConditionalTypeScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.ConditionalTypeScope(this, this.currentScope, node));\n  }\n  nestForScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.ForScope(this, this.currentScope, node));\n  }\n  nestFunctionExpressionNameScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.FunctionExpressionNameScope(this, this.currentScope, node));\n  }\n  nestFunctionScope(node, isMethodDefinition) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.FunctionScope(this, this.currentScope, node, isMethodDefinition));\n  }\n  nestFunctionTypeScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.FunctionTypeScope(this, this.currentScope, node));\n  }\n  nestGlobalScope(node) {\n    return this.nestScope(new scope_1.GlobalScope(this, node));\n  }\n  nestMappedTypeScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.MappedTypeScope(this, this.currentScope, node));\n  }\n  nestModuleScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.ModuleScope(this, this.currentScope, node));\n  }\n  nestSwitchScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.SwitchScope(this, this.currentScope, node));\n  }\n  nestTSEnumScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.TSEnumScope(this, this.currentScope, node));\n  }\n  nestTSModuleScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.TSModuleScope(this, this.currentScope, node));\n  }\n  nestTypeScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.TypeScope(this, this.currentScope, node));\n  }\n  nestWithScope(node) {\n    (0, assert_1.assert)(this.currentScope);\n    return this.nestScope(new scope_1.WithScope(this, this.currentScope, node));\n  }\n}\nexports.ScopeManager = ScopeManager;\n_ScopeManager_options = new WeakMap();","map":{"version":3,"mappings":"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","names":["ScopeManager","variables","Set","recurse","scope","forEach","v","add","childScopes","scopes","Array","from","sort","a","b","$id","constructor","options","_ScopeManager_options","globalScope","nodeToScope","WeakMap","currentScope","__classPrivateFieldSet","declaredVariables","isGlobalReturn","__classPrivateFieldGet","globalReturn","isModule","sourceType","isImpliedStrict","impliedStrict","isStrictModeSupported","ecmaVersion","isES6","getDeclaredVariables","node","get","acquire","inner","predicate","testScope","type","functionExpressionScope","length","i","find","nestScope","scope_1","nestBlockScope","nestCatchScope","nestClassScope","nestClassFieldInitializerScope","ClassFieldInitializerScope_1","nestClassStaticBlockScope","ClassStaticBlockScope_1","nestConditionalTypeScope","nestForScope","nestFunctionExpressionNameScope","nestFunctionScope","isMethodDefinition","nestFunctionTypeScope","nestGlobalScope","nestMappedTypeScope","nestModuleScope","nestSwitchScope","nestTSEnumScope","nestTSModuleScope","nestTypeScope","nestWithScope","exports"],"sources":["../src/ScopeManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}