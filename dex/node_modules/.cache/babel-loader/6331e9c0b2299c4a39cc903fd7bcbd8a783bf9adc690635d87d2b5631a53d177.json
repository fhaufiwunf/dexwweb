{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDefaultProgram = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst ts = __importStar(require(\"typescript\"));\nconst shared_1 = require(\"./shared\");\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:createDefaultProgram');\n/**\n * @param parseSettings Internal settings for parsing the file\n * @returns If found, returns the source file corresponding to the code and the containing program\n */\nfunction createDefaultProgram(parseSettings) {\n  var _a;\n  log('Getting default program for: %s', parseSettings.filePath || 'unnamed file');\n  if (((_a = parseSettings.projects) === null || _a === void 0 ? void 0 : _a.length) !== 1) {\n    return undefined;\n  }\n  const tsconfigPath = parseSettings.projects[0];\n  const commandLine = ts.getParsedCommandLineOfConfigFile(tsconfigPath, (0, shared_1.createDefaultCompilerOptionsFromExtra)(parseSettings), Object.assign(Object.assign({}, ts.sys), {\n    onUnRecoverableConfigFileDiagnostic: () => {}\n  }));\n  if (!commandLine) {\n    return undefined;\n  }\n  const compilerHost = ts.createCompilerHost(commandLine.options, /* setParentNodes */true);\n  if (parseSettings.moduleResolver) {\n    // eslint-disable-next-line deprecation/deprecation -- intentional for older TS versions\n    compilerHost.resolveModuleNames = (0, shared_1.getModuleResolver)(parseSettings.moduleResolver).resolveModuleNames;\n  }\n  const oldReadFile = compilerHost.readFile;\n  compilerHost.readFile = fileName => path_1.default.normalize(fileName) === path_1.default.normalize(parseSettings.filePath) ? parseSettings.code : oldReadFile(fileName);\n  const program = ts.createProgram([parseSettings.filePath], commandLine.options, compilerHost);\n  const ast = program.getSourceFile(parseSettings.filePath);\n  return ast && {\n    ast,\n    program\n  };\n}\nexports.createDefaultProgram = createDefaultProgram;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAIA;AAKA,MAAMA,GAAG,GAAG,mBAAK,EAAC,0DAA0D,CAAC;AAE7E;;;;AAIA,SAASC,oBAAoBA,CAC3BC,aAA4B;;EAE5BF,GAAG,CACD,iCAAiC,EACjCE,aAAa,CAACC,QAAQ,IAAI,cAAc,CACzC;EAED,IAAI,oBAAa,CAACC,QAAQ,0CAAEC,MAAM,MAAK,CAAC,EAAE;IACxC,OAAOC,SAAS;;EAGlB,MAAMC,YAAY,GAAGL,aAAa,CAACE,QAAQ,CAAC,CAAC,CAAC;EAE9C,MAAMI,WAAW,GAAGC,EAAE,CAACC,gCAAgC,CACrDH,YAAY,EACZ,kDAAqC,EAACL,aAAa,CAAC,kCAC/CO,EAAE,CAACE,GAAG;IAAEC,mCAAmC,EAAEA,MAAK,CAAE;EAAC,GAC3D;EAED,IAAI,CAACJ,WAAW,EAAE;IAChB,OAAOF,SAAS;;EAGlB,MAAMO,YAAY,GAAGJ,EAAE,CAACK,kBAAkB,CACxCN,WAAW,CAACO,OAAO,EACnB,oBAAqB,IAAI,CAC1B;EAED,IAAIb,aAAa,CAACc,cAAc,EAAE;IAChC;IACAH,YAAY,CAACI,kBAAkB,GAAG,8BAAiB,EACjDf,aAAa,CAACc,cAAc,CAC7B,CAACC,kBAAkB;;EAGtB,MAAMC,WAAW,GAAGL,YAAY,CAACM,QAAQ;EACzCN,YAAY,CAACM,QAAQ,GAAIC,QAAgB,IACvCC,cAAI,CAACC,SAAS,CAACF,QAAQ,CAAC,KAAKC,cAAI,CAACC,SAAS,CAACpB,aAAa,CAACC,QAAQ,CAAC,GAC/DD,aAAa,CAACqB,IAAI,GAClBL,WAAW,CAACE,QAAQ,CAAC;EAE3B,MAAMI,OAAO,GAAGf,EAAE,CAACgB,aAAa,CAC9B,CAACvB,aAAa,CAACC,QAAQ,CAAC,EACxBK,WAAW,CAACO,OAAO,EACnBF,YAAY,CACb;EACD,MAAMa,GAAG,GAAGF,OAAO,CAACG,aAAa,CAACzB,aAAa,CAACC,QAAQ,CAAC;EAEzD,OAAOuB,GAAG,IAAI;IAAEA,GAAG;IAAEF;EAAO,CAAE;AAChC;AAESI","names":["log","createDefaultProgram","parseSettings","filePath","projects","length","undefined","tsconfigPath","commandLine","ts","getParsedCommandLineOfConfigFile","sys","onUnRecoverableConfigFileDiagnostic","compilerHost","createCompilerHost","options","moduleResolver","resolveModuleNames","oldReadFile","readFile","fileName","path_1","normalize","code","program","createProgram","ast","getSourceFile","exports"],"sources":["../../src/create-program/createDefaultProgram.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}