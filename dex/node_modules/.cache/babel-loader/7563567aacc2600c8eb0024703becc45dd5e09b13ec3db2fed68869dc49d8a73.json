{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getModuleResolver = exports.getAstFromProgram = exports.getCanonicalFileName = exports.ensureAbsolutePath = exports.createHash = exports.createDefaultCompilerOptionsFromExtra = exports.canonicalDirname = exports.CORE_COMPILER_OPTIONS = void 0;\nconst path_1 = __importDefault(require(\"path\"));\nconst ts = __importStar(require(\"typescript\"));\n/**\n * Compiler options required to avoid critical functionality issues\n */\nconst CORE_COMPILER_OPTIONS = {\n  noEmit: true,\n  /**\n   * Flags required to make no-unused-vars work\n   */\n  noUnusedLocals: true,\n  noUnusedParameters: true\n};\nexports.CORE_COMPILER_OPTIONS = CORE_COMPILER_OPTIONS;\n/**\n * Default compiler options for program generation\n */\nconst DEFAULT_COMPILER_OPTIONS = Object.assign(Object.assign({}, CORE_COMPILER_OPTIONS), {\n  allowNonTsExtensions: true,\n  allowJs: true,\n  checkJs: true\n});\nfunction createDefaultCompilerOptionsFromExtra(parseSettings) {\n  if (parseSettings.debugLevel.has('typescript')) {\n    return Object.assign(Object.assign({}, DEFAULT_COMPILER_OPTIONS), {\n      extendedDiagnostics: true\n    });\n  }\n  return DEFAULT_COMPILER_OPTIONS;\n}\nexports.createDefaultCompilerOptionsFromExtra = createDefaultCompilerOptionsFromExtra;\n// typescript doesn't provide a ts.sys implementation for browser environments\nconst useCaseSensitiveFileNames = ts.sys !== undefined ? ts.sys.useCaseSensitiveFileNames : true;\nconst correctPathCasing = useCaseSensitiveFileNames ? filePath => filePath : filePath => filePath.toLowerCase();\nfunction getCanonicalFileName(filePath) {\n  let normalized = path_1.default.normalize(filePath);\n  if (normalized.endsWith(path_1.default.sep)) {\n    normalized = normalized.slice(0, -1);\n  }\n  return correctPathCasing(normalized);\n}\nexports.getCanonicalFileName = getCanonicalFileName;\nfunction ensureAbsolutePath(p, tsconfigRootDir) {\n  return path_1.default.isAbsolute(p) ? p : path_1.default.join(tsconfigRootDir || process.cwd(), p);\n}\nexports.ensureAbsolutePath = ensureAbsolutePath;\nfunction canonicalDirname(p) {\n  return path_1.default.dirname(p);\n}\nexports.canonicalDirname = canonicalDirname;\nconst DEFINITION_EXTENSIONS = [ts.Extension.Dts, ts.Extension.Dcts, ts.Extension.Dmts];\nfunction getExtension(fileName) {\n  var _a;\n  if (!fileName) {\n    return null;\n  }\n  return (_a = DEFINITION_EXTENSIONS.find(definitionExt => fileName.endsWith(definitionExt))) !== null && _a !== void 0 ? _a : path_1.default.extname(fileName);\n}\nfunction getAstFromProgram(currentProgram, parseSettings) {\n  const ast = currentProgram.getSourceFile(parseSettings.filePath);\n  // working around https://github.com/typescript-eslint/typescript-eslint/issues/1573\n  const expectedExt = getExtension(parseSettings.filePath);\n  const returnedExt = getExtension(ast === null || ast === void 0 ? void 0 : ast.fileName);\n  if (expectedExt !== returnedExt) {\n    return undefined;\n  }\n  return ast && {\n    ast,\n    program: currentProgram\n  };\n}\nexports.getAstFromProgram = getAstFromProgram;\nfunction getModuleResolver(moduleResolverPath) {\n  let moduleResolver;\n  try {\n    moduleResolver = require(moduleResolverPath);\n  } catch (error) {\n    const errorLines = ['Could not find the provided parserOptions.moduleResolver.', 'Hint: use an absolute path if you are not in control over where the ESLint instance runs.'];\n    throw new Error(errorLines.join('\\n'));\n  }\n  return moduleResolver;\n}\nexports.getModuleResolver = getModuleResolver;\n/**\n * Hash content for compare content.\n * @param content hashed contend\n * @returns hashed result\n */\nfunction createHash(content) {\n  var _a;\n  // No ts.sys in browser environments.\n  if ((_a = ts.sys) === null || _a === void 0 ? void 0 : _a.createHash) {\n    return ts.sys.createHash(content);\n  }\n  return content;\n}\nexports.createHash = createHash;","map":{"version":3,"mappings":"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","names":["CORE_COMPILER_OPTIONS","noEmit","noUnusedLocals","noUnusedParameters","exports","DEFAULT_COMPILER_OPTIONS","allowNonTsExtensions","allowJs","checkJs","createDefaultCompilerOptionsFromExtra","parseSettings","debugLevel","has","extendedDiagnostics","useCaseSensitiveFileNames","ts","sys","undefined","correctPathCasing","filePath","toLowerCase","getCanonicalFileName","normalized","path_1","normalize","endsWith","sep","slice","ensureAbsolutePath","p","tsconfigRootDir","isAbsolute","join","process","cwd","canonicalDirname","dirname","DEFINITION_EXTENSIONS","Extension","Dts","Dcts","Dmts","getExtension","fileName","find","definitionExt","extname","getAstFromProgram","currentProgram","ast","getSourceFile","expectedExt","returnedExt","program","getModuleResolver","moduleResolverPath","moduleResolver","require","error","errorLines","Error","createHash","content"],"sources":["../../src/create-program/shared.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}