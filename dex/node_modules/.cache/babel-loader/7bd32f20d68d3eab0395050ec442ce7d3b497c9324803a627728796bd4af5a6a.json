{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearTSConfigMatchCache = exports.createParseSettings = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst shared_1 = require(\"../create-program/shared\");\nconst ExpiringCache_1 = require(\"./ExpiringCache\");\nconst getProjectConfigFiles_1 = require(\"./getProjectConfigFiles\");\nconst inferSingleRun_1 = require(\"./inferSingleRun\");\nconst resolveProjectList_1 = require(\"./resolveProjectList\");\nconst warnAboutTSVersion_1 = require(\"./warnAboutTSVersion\");\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:parser:parseSettings:createParseSettings');\nlet TSCONFIG_MATCH_CACHE;\nfunction createParseSettings(code) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a, _b, _c;\n  const singleRun = (0, inferSingleRun_1.inferSingleRun)(options);\n  const tsconfigRootDir = typeof options.tsconfigRootDir === 'string' ? options.tsconfigRootDir : process.cwd();\n  const parseSettings = {\n    code: enforceString(code),\n    comment: options.comment === true,\n    comments: [],\n    createDefaultProgram: options.createDefaultProgram === true,\n    debugLevel: options.debugLevel === true ? new Set(['typescript-eslint']) : Array.isArray(options.debugLevel) ? new Set(options.debugLevel) : new Set(),\n    errorOnTypeScriptSyntacticAndSemanticIssues: false,\n    errorOnUnknownASTType: options.errorOnUnknownASTType === true,\n    EXPERIMENTAL_useSourceOfProjectReferenceRedirect: options.EXPERIMENTAL_useSourceOfProjectReferenceRedirect === true,\n    extraFileExtensions: Array.isArray(options.extraFileExtensions) && options.extraFileExtensions.every(ext => typeof ext === 'string') ? options.extraFileExtensions : [],\n    filePath: (0, shared_1.ensureAbsolutePath)(typeof options.filePath === 'string' && options.filePath !== '<input>' ? options.filePath : getFileName(options.jsx), tsconfigRootDir),\n    jsx: options.jsx === true,\n    loc: options.loc === true,\n    log: typeof options.loggerFn === 'function' ? options.loggerFn : options.loggerFn === false ? () => {} : console.log,\n    moduleResolver: (_a = options.moduleResolver) !== null && _a !== void 0 ? _a : '',\n    preserveNodeMaps: options.preserveNodeMaps !== false,\n    programs: Array.isArray(options.programs) ? options.programs : null,\n    projects: [],\n    range: options.range === true,\n    singleRun,\n    tokens: options.tokens === true ? [] : null,\n    tsconfigMatchCache: TSCONFIG_MATCH_CACHE !== null && TSCONFIG_MATCH_CACHE !== void 0 ? TSCONFIG_MATCH_CACHE : TSCONFIG_MATCH_CACHE = new ExpiringCache_1.ExpiringCache(singleRun ? 'Infinity' : (_c = (_b = options.cacheLifetime) === null || _b === void 0 ? void 0 : _b.glob) !== null && _c !== void 0 ? _c : ExpiringCache_1.DEFAULT_TSCONFIG_CACHE_DURATION_SECONDS),\n    tsconfigRootDir\n  };\n  // debug doesn't support multiple `enable` calls, so have to do it all at once\n  if (parseSettings.debugLevel.size > 0) {\n    const namespaces = [];\n    if (parseSettings.debugLevel.has('typescript-eslint')) {\n      namespaces.push('typescript-eslint:*');\n    }\n    if (parseSettings.debugLevel.has('eslint') ||\n    // make sure we don't turn off the eslint debug if it was enabled via --debug\n    debug_1.default.enabled('eslint:*,-eslint:code-path')) {\n      // https://github.com/eslint/eslint/blob/9dfc8501fb1956c90dc11e6377b4cb38a6bea65d/bin/eslint.js#L25\n      namespaces.push('eslint:*,-eslint:code-path');\n    }\n    debug_1.default.enable(namespaces.join(','));\n  }\n  if (Array.isArray(options.programs)) {\n    if (!options.programs.length) {\n      throw new Error(`You have set parserOptions.programs to an empty array. This will cause all files to not be found in existing programs. Either provide one or more existing TypeScript Program instances in the array, or remove the parserOptions.programs setting.`);\n    }\n    log('parserOptions.programs was provided, so parserOptions.project will be ignored.');\n  }\n  // Providing a program overrides project resolution\n  if (!parseSettings.programs) {\n    parseSettings.projects = (0, resolveProjectList_1.resolveProjectList)({\n      cacheLifetime: options.cacheLifetime,\n      project: (0, getProjectConfigFiles_1.getProjectConfigFiles)(parseSettings, options.project),\n      projectFolderIgnoreList: options.projectFolderIgnoreList,\n      singleRun: parseSettings.singleRun,\n      tsconfigRootDir: tsconfigRootDir\n    });\n  }\n  (0, warnAboutTSVersion_1.warnAboutTSVersion)(parseSettings);\n  return parseSettings;\n}\nexports.createParseSettings = createParseSettings;\nfunction clearTSConfigMatchCache() {\n  TSCONFIG_MATCH_CACHE === null || TSCONFIG_MATCH_CACHE === void 0 ? void 0 : TSCONFIG_MATCH_CACHE.clear();\n}\nexports.clearTSConfigMatchCache = clearTSConfigMatchCache;\n/**\n * Ensures source code is a string.\n */\nfunction enforceString(code) {\n  if (typeof code !== 'string') {\n    return String(code);\n  }\n  return code;\n}\n/**\n * Compute the filename based on the parser options.\n *\n * Even if jsx option is set in typescript compiler, filename still has to\n * contain .tsx file extension.\n *\n * @param options Parser options\n */\nfunction getFileName(jsx) {\n  return jsx ? 'estree.tsx' : 'estree.ts';\n}","map":{"version":3,"mappings":"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","names":["log","TSCONFIG_MATCH_CACHE","createParseSettings","code","options","singleRun","tsconfigRootDir","process","cwd","parseSettings","enforceString","comment","comments","createDefaultProgram","debugLevel","Set","Array","isArray","errorOnTypeScriptSyntacticAndSemanticIssues","errorOnUnknownASTType","EXPERIMENTAL_useSourceOfProjectReferenceRedirect","extraFileExtensions","every","ext","filePath","getFileName","jsx","loc","loggerFn","console","moduleResolver","preserveNodeMaps","programs","projects","range","tokens","tsconfigMatchCache","ExpiringCache_1","cacheLifetime","glob","size","namespaces","has","push","debug_1","enabled","enable","join","length","Error","project","projectFolderIgnoreList","exports","clearTSConfigMatchCache","clear","String"],"sources":["../../src/parseSettings/createParseSettings.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}