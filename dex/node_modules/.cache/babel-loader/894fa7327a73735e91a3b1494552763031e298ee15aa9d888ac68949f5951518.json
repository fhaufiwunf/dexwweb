{"ast":null,"code":"'use strict';\n\nconst {\n  promisify\n} = require('util');\nconst fs = require('fs');\nconst path = require('path');\nconst fastGlob = require('fast-glob');\nconst gitIgnore = require('ignore');\nconst slash = require('slash');\nconst DEFAULT_IGNORE = ['**/node_modules/**', '**/flow-typed/**', '**/coverage/**', '**/.git'];\nconst readFileP = promisify(fs.readFile);\nconst mapGitIgnorePatternTo = base => ignore => {\n  if (ignore.startsWith('!')) {\n    return '!' + path.posix.join(base, ignore.slice(1));\n  }\n  return path.posix.join(base, ignore);\n};\nconst parseGitIgnore = (content, options) => {\n  const base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n  return content.split(/\\r?\\n/).filter(Boolean).filter(line => !line.startsWith('#')).map(mapGitIgnorePatternTo(base));\n};\nconst reduceIgnore = files => {\n  const ignores = gitIgnore();\n  for (const file of files) {\n    ignores.add(parseGitIgnore(file.content, {\n      cwd: file.cwd,\n      fileName: file.filePath\n    }));\n  }\n  return ignores;\n};\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n  cwd = slash(cwd);\n  if (path.isAbsolute(p)) {\n    if (slash(p).startsWith(cwd)) {\n      return p;\n    }\n    throw new Error(`Path ${p} is not in cwd ${cwd}`);\n  }\n  return path.join(cwd, p);\n};\nconst getIsIgnoredPredecate = (ignores, cwd) => {\n  return p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p))));\n};\nconst getFile = async (file, cwd) => {\n  const filePath = path.join(cwd, file);\n  const content = await readFileP(filePath, 'utf8');\n  return {\n    cwd,\n    filePath,\n    content\n  };\n};\nconst getFileSync = (file, cwd) => {\n  const filePath = path.join(cwd, file);\n  const content = fs.readFileSync(filePath, 'utf8');\n  return {\n    cwd,\n    filePath,\n    content\n  };\n};\nconst normalizeOptions = function () {\n  let {\n    ignore = [],\n    cwd = slash(process.cwd())\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    ignore,\n    cwd\n  };\n};\nmodule.exports = async options => {\n  options = normalizeOptions(options);\n  const paths = await fastGlob('**/.gitignore', {\n    ignore: DEFAULT_IGNORE.concat(options.ignore),\n    cwd: options.cwd\n  });\n  const files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n  const ignores = reduceIgnore(files);\n  return getIsIgnoredPredecate(ignores, options.cwd);\n};\nmodule.exports.sync = options => {\n  options = normalizeOptions(options);\n  const paths = fastGlob.sync('**/.gitignore', {\n    ignore: DEFAULT_IGNORE.concat(options.ignore),\n    cwd: options.cwd\n  });\n  const files = paths.map(file => getFileSync(file, options.cwd));\n  const ignores = reduceIgnore(files);\n  return getIsIgnoredPredecate(ignores, options.cwd);\n};","map":{"version":3,"names":["promisify","require","fs","path","fastGlob","gitIgnore","slash","DEFAULT_IGNORE","readFileP","readFile","mapGitIgnorePatternTo","base","ignore","startsWith","posix","join","slice","parseGitIgnore","content","options","relative","cwd","dirname","fileName","split","filter","Boolean","line","map","reduceIgnore","files","ignores","file","add","filePath","ensureAbsolutePathForCwd","p","isAbsolute","Error","getIsIgnoredPredecate","getFile","getFileSync","readFileSync","normalizeOptions","process","arguments","length","undefined","module","exports","paths","concat","Promise","all","sync"],"sources":["C:/Users/ADMIN/node_modules/globby/gitignore.js"],"sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst path = require('path');\nconst fastGlob = require('fast-glob');\nconst gitIgnore = require('ignore');\nconst slash = require('slash');\n\nconst DEFAULT_IGNORE = [\n\t'**/node_modules/**',\n\t'**/flow-typed/**',\n\t'**/coverage/**',\n\t'**/.git'\n];\n\nconst readFileP = promisify(fs.readFile);\n\nconst mapGitIgnorePatternTo = base => ignore => {\n\tif (ignore.startsWith('!')) {\n\t\treturn '!' + path.posix.join(base, ignore.slice(1));\n\t}\n\n\treturn path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, options) => {\n\tconst base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n\n\treturn content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(Boolean)\n\t\t.filter(line => !line.startsWith('#'))\n\t\t.map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n\tconst ignores = gitIgnore();\n\tfor (const file of files) {\n\t\tignores.add(parseGitIgnore(file.content, {\n\t\t\tcwd: file.cwd,\n\t\t\tfileName: file.filePath\n\t\t}));\n\t}\n\n\treturn ignores;\n};\n\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n\tcwd = slash(cwd);\n\tif (path.isAbsolute(p)) {\n\t\tif (slash(p).startsWith(cwd)) {\n\t\t\treturn p;\n\t\t}\n\n\t\tthrow new Error(`Path ${p} is not in cwd ${cwd}`);\n\t}\n\n\treturn path.join(cwd, p);\n};\n\nconst getIsIgnoredPredecate = (ignores, cwd) => {\n\treturn p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p))));\n};\n\nconst getFile = async (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = await readFileP(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent\n\t};\n};\n\nconst getFileSync = (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = fs.readFileSync(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent\n\t};\n};\n\nconst normalizeOptions = ({\n\tignore = [],\n\tcwd = slash(process.cwd())\n} = {}) => {\n\treturn {ignore, cwd};\n};\n\nmodule.exports = async options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = await fastGlob('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd\n\t});\n\n\tconst files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredecate(ignores, options.cwd);\n};\n\nmodule.exports.sync = options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = fastGlob.sync('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd\n\t});\n\n\tconst files = paths.map(file => getFileSync(file, options.cwd));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredecate(ignores, options.cwd);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}