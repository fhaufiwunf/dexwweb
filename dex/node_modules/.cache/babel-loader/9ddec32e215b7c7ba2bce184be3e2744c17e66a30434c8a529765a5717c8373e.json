{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GlobalScope = void 0;\nconst types_1 = require(\"@typescript-eslint/types\");\nconst assert_1 = require(\"../assert\");\nconst ImplicitGlobalVariableDefinition_1 = require(\"../definition/ImplicitGlobalVariableDefinition\");\nconst variable_1 = require(\"../variable\");\nconst ScopeBase_1 = require(\"./ScopeBase\");\nconst ScopeType_1 = require(\"./ScopeType\");\nclass GlobalScope extends ScopeBase_1.ScopeBase {\n  constructor(scopeManager, block) {\n    super(scopeManager, ScopeType_1.ScopeType.global, null, block, false);\n    this.implicit = {\n      set: new Map(),\n      variables: [],\n      leftToBeResolved: []\n    };\n  }\n  defineImplicitVariable(name, options) {\n    this.defineVariable(new variable_1.ImplicitLibVariable(this, name, options), this.set, this.variables, null, null);\n  }\n  close(scopeManager) {\n    (0, assert_1.assert)(this.leftToResolve);\n    for (const ref of this.leftToResolve) {\n      if (ref.maybeImplicitGlobal && !this.set.has(ref.identifier.name)) {\n        // create an implicit global variable from assignment expression\n        const info = ref.maybeImplicitGlobal;\n        const node = info.pattern;\n        if (node && node.type === types_1.AST_NODE_TYPES.Identifier) {\n          this.defineVariable(node.name, this.implicit.set, this.implicit.variables, node, new ImplicitGlobalVariableDefinition_1.ImplicitGlobalVariableDefinition(info.pattern, info.node));\n        }\n      }\n    }\n    this.implicit.leftToBeResolved = this.leftToResolve;\n    return super.close(scopeManager);\n  }\n}\nexports.GlobalScope = GlobalScope;","map":{"version":3,"mappings":";;;;;;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAEA,MAAMA,WAAY,SAAQC,qBAOzB;EAYCC,YAAYC,YAA0B,EAAEC,KAA2B;IACjE,KAAK,CAACD,YAAY,EAAEE,qBAAS,CAACC,MAAM,EAAE,IAAI,EAAEF,KAAK,EAAE,KAAK,CAAC;IACzD,IAAI,CAACG,QAAQ,GAAG;MACdC,GAAG,EAAE,IAAIC,GAAG,EAAoB;MAChCC,SAAS,EAAE,EAAE;MACbC,gBAAgB,EAAE;KACnB;EACH;EAEOC,sBAAsBA,CAC3BC,IAAY,EACZC,OAAmC;IAEnC,IAAI,CAACC,cAAc,CACjB,IAAIC,8BAAmB,CAAC,IAAI,EAAEH,IAAI,EAAEC,OAAO,CAAC,EAC5C,IAAI,CAACN,GAAG,EACR,IAAI,CAACE,SAAS,EACd,IAAI,EACJ,IAAI,CACL;EACH;EAEOO,KAAKA,CAACd,YAA0B;IACrC,mBAAM,EAAC,IAAI,CAACe,aAAa,CAAC;IAE1B,KAAK,MAAMC,GAAG,IAAI,IAAI,CAACD,aAAa,EAAE;MACpC,IAAIC,GAAG,CAACC,mBAAmB,IAAI,CAAC,IAAI,CAACZ,GAAG,CAACa,GAAG,CAACF,GAAG,CAACG,UAAU,CAACT,IAAI,CAAC,EAAE;QACjE;QACA,MAAMU,IAAI,GAAGJ,GAAG,CAACC,mBAAmB;QACpC,MAAMI,IAAI,GAAGD,IAAI,CAACE,OAAO;QACzB,IAAID,IAAI,IAAIA,IAAI,CAACE,IAAI,KAAKC,sBAAc,CAACC,UAAU,EAAE;UACnD,IAAI,CAACb,cAAc,CACjBS,IAAI,CAACX,IAAI,EACT,IAAI,CAACN,QAAQ,CAACC,GAAG,EACjB,IAAI,CAACD,QAAQ,CAACG,SAAS,EACvBc,IAAI,EACJ,IAAIK,mEAAgC,CAACN,IAAI,CAACE,OAAO,EAAEF,IAAI,CAACC,IAAI,CAAC,CAC9D;;;;IAKP,IAAI,CAACjB,QAAQ,CAACI,gBAAgB,GAAG,IAAI,CAACO,aAAa;IACnD,OAAO,KAAK,CAACD,KAAK,CAACd,YAAY,CAAC;EAClC;;AAGO2B","names":["GlobalScope","ScopeBase_1","constructor","scopeManager","block","ScopeType_1","global","implicit","set","Map","variables","leftToBeResolved","defineImplicitVariable","name","options","defineVariable","variable_1","close","leftToResolve","ref","maybeImplicitGlobal","has","identifier","info","node","pattern","type","types_1","Identifier","ImplicitGlobalVariableDefinition_1","exports"],"sources":["../../src/scope/GlobalScope.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}