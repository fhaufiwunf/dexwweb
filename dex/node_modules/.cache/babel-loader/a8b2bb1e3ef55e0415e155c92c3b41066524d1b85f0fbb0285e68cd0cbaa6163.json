{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.astConverter = void 0;\nconst convert_1 = require(\"./convert\");\nconst convert_comments_1 = require(\"./convert-comments\");\nconst node_utils_1 = require(\"./node-utils\");\nconst simple_traverse_1 = require(\"./simple-traverse\");\nfunction astConverter(ast, parseSettings, shouldPreserveNodeMaps) {\n  /**\n   * The TypeScript compiler produced fundamental parse errors when parsing the\n   * source.\n   */\n  const {\n    parseDiagnostics\n  } = ast;\n  if (parseDiagnostics.length) {\n    throw (0, convert_1.convertError)(parseDiagnostics[0]);\n  }\n  /**\n   * Recursively convert the TypeScript AST into an ESTree-compatible AST\n   */\n  const instance = new convert_1.Converter(ast, {\n    errorOnUnknownASTType: parseSettings.errorOnUnknownASTType || false,\n    shouldPreserveNodeMaps\n  });\n  const estree = instance.convertProgram();\n  /**\n   * Optionally remove range and loc if specified\n   */\n  if (!parseSettings.range || !parseSettings.loc) {\n    (0, simple_traverse_1.simpleTraverse)(estree, {\n      enter: node => {\n        if (!parseSettings.range) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- TS 4.0 made this an error because the types aren't optional\n          // @ts-expect-error\n          delete node.range;\n        }\n        if (!parseSettings.loc) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment -- TS 4.0 made this an error because the types aren't optional\n          // @ts-expect-error\n          delete node.loc;\n        }\n      }\n    });\n  }\n  /**\n   * Optionally convert and include all tokens in the AST\n   */\n  if (parseSettings.tokens) {\n    estree.tokens = (0, node_utils_1.convertTokens)(ast);\n  }\n  /**\n   * Optionally convert and include all comments in the AST\n   */\n  if (parseSettings.comment) {\n    estree.comments = (0, convert_comments_1.convertComments)(ast, parseSettings.code);\n  }\n  const astMaps = instance.getASTMaps();\n  return {\n    estree,\n    astMaps\n  };\n}\nexports.astConverter = astConverter;","map":{"version":3,"mappings":";;;;;;AAGA;AACA;AACA;AAEA;AAGA,SAAgBA,YAAYA,CAC1BC,GAAe,EACfC,aAA4B,EAC5BC,sBAA+B;EAE/B;;;;EAIA,MAAM;IAAEC;EAAgB,CAAE,GAAGH,GAAG;EAChC,IAAIG,gBAAgB,CAACC,MAAM,EAAE;IAC3B,MAAM,0BAAY,EAACD,gBAAgB,CAAC,CAAC,CAAC,CAAC;;EAGzC;;;EAGA,MAAME,QAAQ,GAAG,IAAIC,mBAAS,CAACN,GAAG,EAAE;IAClCO,qBAAqB,EAAEN,aAAa,CAACM,qBAAqB,IAAI,KAAK;IACnEL;GACD,CAAC;EAEF,MAAMM,MAAM,GAAGH,QAAQ,CAACI,cAAc,EAAE;EAExC;;;EAGA,IAAI,CAACR,aAAa,CAACS,KAAK,IAAI,CAACT,aAAa,CAACU,GAAG,EAAE;IAC9C,oCAAc,EAACH,MAAM,EAAE;MACrBI,KAAK,EAAEC,IAAI,IAAG;QACZ,IAAI,CAACZ,aAAa,CAACS,KAAK,EAAE;UACxB;UACA;UACA,OAAOG,IAAI,CAACH,KAAK;;QAEnB,IAAI,CAACT,aAAa,CAACU,GAAG,EAAE;UACtB;UACA;UACA,OAAOE,IAAI,CAACF,GAAG;;MAEnB;KACD,CAAC;;EAGJ;;;EAGA,IAAIV,aAAa,CAACa,MAAM,EAAE;IACxBN,MAAM,CAACM,MAAM,GAAG,8BAAa,EAACd,GAAG,CAAC;;EAGpC;;;EAGA,IAAIC,aAAa,CAACc,OAAO,EAAE;IACzBP,MAAM,CAACQ,QAAQ,GAAG,sCAAe,EAAChB,GAAG,EAAEC,aAAa,CAACgB,IAAI,CAAC;;EAG5D,MAAMC,OAAO,GAAGb,QAAQ,CAACc,UAAU,EAAE;EAErC,OAAO;IAAEX,MAAM;IAAEU;EAAO,CAAE;AAC5B;AA7DAE","names":["astConverter","ast","parseSettings","shouldPreserveNodeMaps","parseDiagnostics","length","instance","convert_1","errorOnUnknownASTType","estree","convertProgram","range","loc","enter","node","tokens","comment","comments","code","astMaps","getASTMaps","exports"],"sources":["../src/ast-converter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}