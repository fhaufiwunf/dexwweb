{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _TypeVisitor_referencer;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypeVisitor = void 0;\nconst types_1 = require(\"@typescript-eslint/types\");\nconst definition_1 = require(\"../definition\");\nconst scope_1 = require(\"../scope\");\nconst Visitor_1 = require(\"./Visitor\");\nclass TypeVisitor extends Visitor_1.Visitor {\n  constructor(referencer) {\n    super(referencer);\n    _TypeVisitor_referencer.set(this, void 0);\n    __classPrivateFieldSet(this, _TypeVisitor_referencer, referencer, \"f\");\n  }\n  static visit(referencer, node) {\n    const typeReferencer = new TypeVisitor(referencer);\n    typeReferencer.visit(node);\n  }\n  ///////////////////\n  // Visit helpers //\n  ///////////////////\n  visitFunctionType(node) {\n    // arguments and type parameters can only be referenced from within the function\n    __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").scopeManager.nestFunctionTypeScope(node);\n    this.visit(node.typeParameters);\n    for (const param of node.params) {\n      let didVisitAnnotation = false;\n      this.visitPattern(param, (pattern, info) => {\n        // a parameter name creates a value type variable which can be referenced later via typeof arg\n        __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").currentScope().defineIdentifier(pattern, new definition_1.ParameterDefinition(pattern, node, info.rest));\n        if (pattern.typeAnnotation) {\n          this.visit(pattern.typeAnnotation);\n          didVisitAnnotation = true;\n        }\n      });\n      // there are a few special cases where the type annotation is owned by the parameter, not the pattern\n      if (!didVisitAnnotation && 'typeAnnotation' in param) {\n        this.visit(param.typeAnnotation);\n      }\n    }\n    this.visit(node.returnType);\n    __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").close(node);\n  }\n  visitPropertyKey(node) {\n    if (!node.computed) {\n      return;\n    }\n    // computed members are treated as value references, and TS expects they have a literal type\n    __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").visit(node.key);\n  }\n  /////////////////////\n  // Visit selectors //\n  /////////////////////\n  Identifier(node) {\n    __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").currentScope().referenceType(node);\n  }\n  MemberExpression(node) {\n    this.visit(node.object);\n    // don't visit the property\n  }\n  TSCallSignatureDeclaration(node) {\n    this.visitFunctionType(node);\n  }\n  TSConditionalType(node) {\n    // conditional types can define inferred type parameters\n    // which are only accessible from inside the conditional parameter\n    __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").scopeManager.nestConditionalTypeScope(node);\n    // type parameters inferred in the condition clause are not accessible within the false branch\n    this.visitChildren(node, ['falseType']);\n    __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").close(node);\n    this.visit(node.falseType);\n  }\n  TSConstructorType(node) {\n    this.visitFunctionType(node);\n  }\n  TSConstructSignatureDeclaration(node) {\n    this.visitFunctionType(node);\n  }\n  TSFunctionType(node) {\n    this.visitFunctionType(node);\n  }\n  TSImportType(node) {\n    // the TS parser allows any type to be the parameter, but it's a syntax error - so we can ignore it\n    this.visit(node.typeParameters);\n    // the qualifier is just part of a standard EntityName, so it should not be visited\n  }\n  TSIndexSignature(node) {\n    for (const param of node.parameters) {\n      if (param.type === types_1.AST_NODE_TYPES.Identifier) {\n        this.visit(param.typeAnnotation);\n      }\n    }\n    this.visit(node.typeAnnotation);\n  }\n  TSInferType(node) {\n    const typeParameter = node.typeParameter;\n    let scope = __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").currentScope();\n    /*\n    In cases where there is a sub-type scope created within a conditional type, then the generic should be defined in the\n    conditional type's scope, not the child type scope.\n    If we define it within the child type's scope then it won't be able to be referenced outside the child type\n    */\n    if (scope.type === scope_1.ScopeType.functionType || scope.type === scope_1.ScopeType.mappedType) {\n      // search up the scope tree to figure out if we're in a nested type scope\n      let currentScope = scope.upper;\n      while (currentScope) {\n        if (currentScope.type === scope_1.ScopeType.functionType || currentScope.type === scope_1.ScopeType.mappedType) {\n          // ensure valid type parents only\n          currentScope = currentScope.upper;\n          continue;\n        }\n        if (currentScope.type === scope_1.ScopeType.conditionalType) {\n          scope = currentScope;\n          break;\n        }\n        break;\n      }\n    }\n    scope.defineIdentifier(typeParameter.name, new definition_1.TypeDefinition(typeParameter.name, typeParameter));\n    this.visit(typeParameter.constraint);\n  }\n  TSInterfaceDeclaration(node) {\n    var _a, _b;\n    __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").currentScope().defineIdentifier(node.id, new definition_1.TypeDefinition(node.id, node));\n    if (node.typeParameters) {\n      // type parameters cannot be referenced from outside their current scope\n      __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").scopeManager.nestTypeScope(node);\n      this.visit(node.typeParameters);\n    }\n    (_a = node.extends) === null || _a === void 0 ? void 0 : _a.forEach(this.visit, this);\n    (_b = node.implements) === null || _b === void 0 ? void 0 : _b.forEach(this.visit, this);\n    this.visit(node.body);\n    if (node.typeParameters) {\n      __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").close(node);\n    }\n  }\n  TSMappedType(node) {\n    // mapped types key can only be referenced within their return value\n    __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").scopeManager.nestMappedTypeScope(node);\n    this.visitChildren(node);\n    __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").close(node);\n  }\n  TSMethodSignature(node) {\n    this.visitPropertyKey(node);\n    this.visitFunctionType(node);\n  }\n  TSNamedTupleMember(node) {\n    this.visit(node.elementType);\n    // we don't visit the label as the label only exists for the purposes of documentation\n  }\n  TSPropertySignature(node) {\n    this.visitPropertyKey(node);\n    this.visit(node.typeAnnotation);\n  }\n  TSQualifiedName(node) {\n    this.visit(node.left);\n    // we don't visit the right as it a name on the thing, not a name to reference\n  }\n  TSTypeAliasDeclaration(node) {\n    __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").currentScope().defineIdentifier(node.id, new definition_1.TypeDefinition(node.id, node));\n    if (node.typeParameters) {\n      // type parameters cannot be referenced from outside their current scope\n      __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").scopeManager.nestTypeScope(node);\n      this.visit(node.typeParameters);\n    }\n    this.visit(node.typeAnnotation);\n    if (node.typeParameters) {\n      __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").close(node);\n    }\n  }\n  TSTypeParameter(node) {\n    __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").currentScope().defineIdentifier(node.name, new definition_1.TypeDefinition(node.name, node));\n    this.visit(node.constraint);\n    this.visit(node.default);\n  }\n  TSTypePredicate(node) {\n    if (node.parameterName.type !== types_1.AST_NODE_TYPES.TSThisType) {\n      __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").currentScope().referenceValue(node.parameterName);\n    }\n    this.visit(node.typeAnnotation);\n  }\n  // a type query `typeof foo` is a special case that references a _non-type_ variable,\n  TSTypeQuery(node) {\n    let entityName;\n    if (node.exprName.type === types_1.AST_NODE_TYPES.TSQualifiedName) {\n      let iter = node.exprName;\n      while (iter.left.type === types_1.AST_NODE_TYPES.TSQualifiedName) {\n        iter = iter.left;\n      }\n      entityName = iter.left;\n    } else {\n      entityName = node.exprName;\n    }\n    if (entityName.type === types_1.AST_NODE_TYPES.Identifier) {\n      __classPrivateFieldGet(this, _TypeVisitor_referencer, \"f\").currentScope().referenceValue(entityName);\n    }\n    this.visit(node.typeParameters);\n  }\n  TSTypeAnnotation(node) {\n    // check\n    this.visitChildren(node);\n  }\n}\nexports.TypeVisitor = TypeVisitor;\n_TypeVisitor_referencer = new WeakMap();","map":{"version":3,"mappings":"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","names":["TypeVisitor","Visitor_1","constructor","referencer","_TypeVisitor_referencer","__classPrivateFieldSet","visit","node","typeReferencer","visitFunctionType","__classPrivateFieldGet","scopeManager","nestFunctionTypeScope","typeParameters","param","params","didVisitAnnotation","visitPattern","pattern","info","currentScope","defineIdentifier","definition_1","rest","typeAnnotation","returnType","close","visitPropertyKey","computed","key","Identifier","referenceType","MemberExpression","object","TSCallSignatureDeclaration","TSConditionalType","nestConditionalTypeScope","visitChildren","falseType","TSConstructorType","TSConstructSignatureDeclaration","TSFunctionType","TSImportType","TSIndexSignature","parameters","type","types_1","TSInferType","typeParameter","scope","scope_1","functionType","mappedType","upper","conditionalType","name","constraint","TSInterfaceDeclaration","id","nestTypeScope","extends","forEach","implements","body","TSMappedType","nestMappedTypeScope","TSMethodSignature","TSNamedTupleMember","elementType","TSPropertySignature","TSQualifiedName","left","TSTypeAliasDeclaration","TSTypeParameter","default","TSTypePredicate","parameterName","TSThisType","referenceValue","TSTypeQuery","entityName","exprName","iter","TSTypeAnnotation","exports"],"sources":["../../src/referencer/TypeVisitor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}