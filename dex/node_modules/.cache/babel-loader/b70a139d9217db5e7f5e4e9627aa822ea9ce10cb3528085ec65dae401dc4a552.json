{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// This is a workaround for https://github.com/eslint/eslint/issues/3458\n//\n// To correct how ESLint searches for plugin packages, add this line to the top of your project's .eslintrc.js file:\n//\n//    require(\"@rushstack/eslint-patch/modern-module-resolution\");\n//\nconst _patch_base_1 = require(\"./_patch-base\");\n// error: \"The argument 'filename' must be a file URL object, file URL string, or absolute path string. Received ''\"\nconst isInvalidImporterPath = ex => (ex === null || ex === void 0 ? void 0 : ex.code) === 'ERR_INVALID_ARG_VALUE';\nif (!_patch_base_1.configArrayFactory.__loadPluginPatched) {\n  _patch_base_1.configArrayFactory.__loadPluginPatched = true;\n  // eslint-disable-next-line @typescript-eslint/typedef\n  const originalLoadPlugin = _patch_base_1.configArrayFactory.prototype._loadPlugin;\n  if (_patch_base_1.ESLINT_MAJOR_VERSION === 6) {\n    // ESLint 6.x\n    // https://github.com/eslint/eslint/blob/9738f8cc864d769988ccf42bb70f524444df1349/lib/cli-engine/config-array-factory.js#L915\n    _patch_base_1.configArrayFactory.prototype._loadPlugin = function (name, importerPath, importerName) {\n      const originalResolve = _patch_base_1.ModuleResolver.resolve;\n      try {\n        _patch_base_1.ModuleResolver.resolve = function (moduleName, relativeToPath) {\n          try {\n            // resolve using importerPath instead of relativeToPath\n            return originalResolve.call(this, moduleName, importerPath);\n          } catch (e) {\n            if ((0, _patch_base_1.isModuleResolutionError)(e) || isInvalidImporterPath(e)) {\n              return originalResolve.call(this, moduleName, relativeToPath);\n            }\n            throw e;\n          }\n        };\n        return originalLoadPlugin.apply(this, arguments);\n      } finally {\n        _patch_base_1.ModuleResolver.resolve = originalResolve;\n      }\n    };\n  } else {\n    // ESLint 7.x || 8.x\n    // https://github.com/eslint/eslintrc/blob/242d569020dfe4f561e4503787b99ec016337457/lib/config-array-factory.js#L1023\n    _patch_base_1.configArrayFactory.prototype._loadPlugin = function (name, ctx) {\n      const originalResolve = _patch_base_1.ModuleResolver.resolve;\n      try {\n        _patch_base_1.ModuleResolver.resolve = function (moduleName, relativeToPath) {\n          try {\n            // resolve using ctx.filePath instead of relativeToPath\n            return originalResolve.call(this, moduleName, ctx.filePath);\n          } catch (e) {\n            if ((0, _patch_base_1.isModuleResolutionError)(e) || isInvalidImporterPath(e)) {\n              return originalResolve.call(this, moduleName, relativeToPath);\n            }\n            throw e;\n          }\n        };\n        return originalLoadPlugin.apply(this, arguments);\n      } finally {\n        _patch_base_1.ModuleResolver.resolve = originalResolve;\n      }\n    };\n  }\n}","map":{"version":3,"mappings":";;AAAA;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA,MAAMA,qBAAqB,GAA8BC,EAAE,IACzD,CAACA,EAAoC,aAApCA,EAAE,uBAAFA,EAAE,CAAoCC,IAAI,MAAK,uBAAuB;AAEzE,IAAI,CAACC,gCAAkB,CAACC,mBAAmB,EAAE;EAC3CD,gCAAkB,CAACC,mBAAmB,GAAG,IAAI;EAC7C;EACA,MAAMC,kBAAkB,GAAGF,gCAAkB,CAACG,SAAS,CAACC,WAAW;EAEnE,IAAIJ,kCAAoB,KAAK,CAAC,EAAE;IAC9B;IACA;IACAA,gCAAkB,CAACG,SAAS,CAACC,WAAW,GAAG,UACzCC,IAAY,EACZC,YAAoB,EACpBC,YAAoB;MAEpB,MAAMC,eAAe,GAA2DR,4BAAc,CAACS,OAAO;MACtG,IAAI;QACFT,4BAAc,CAACS,OAAO,GAAG,UAAUC,UAAkB,EAAEC,cAAsB;UAC3E,IAAI;YACF;YACA,OAAOH,eAAe,CAACI,IAAI,CAAC,IAAI,EAAEF,UAAU,EAAEJ,YAAY,CAAC;UAC7D,CAAC,CAAC,OAAOO,CAAC,EAAE;YACV,IAAI,yCAAuB,EAACA,CAAC,CAAC,IAAIhB,qBAAqB,CAACgB,CAAC,CAAC,EAAE;cAC1D,OAAOL,eAAe,CAACI,IAAI,CAAC,IAAI,EAAEF,UAAU,EAAEC,cAAc,CAAC;YAC/D;YACA,MAAME,CAAC;UACT;QACF,CAAC;QACD,OAAOX,kBAAkB,CAACY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;MAClD,CAAC,SAAS;QACRf,4BAAc,CAACS,OAAO,GAAGD,eAAe;MAC1C;IACF,CAAC;EACH,CAAC,MAAM;IACL;IACA;IACAR,gCAAkB,CAACG,SAAS,CAACC,WAAW,GAAG,UAAUC,IAAY,EAAEW,GAA4B;MAC7F,MAAMR,eAAe,GACnBR,4BAAc,CAACS,OAAO;MACxB,IAAI;QACFT,4BAAc,CAACS,OAAO,GAAG,UAAUC,UAAkB,EAAEC,cAAsB;UAC3E,IAAI;YACF;YACA,OAAOH,eAAe,CAACI,IAAI,CAAC,IAAI,EAAEF,UAAU,EAAEM,GAAG,CAACC,QAAQ,CAAC;UAC7D,CAAC,CAAC,OAAOJ,CAAC,EAAE;YACV,IAAI,yCAAuB,EAACA,CAAC,CAAC,IAAIhB,qBAAqB,CAACgB,CAAC,CAAC,EAAE;cAC1D,OAAOL,eAAe,CAACI,IAAI,CAAC,IAAI,EAAEF,UAAU,EAAEC,cAAc,CAAC;YAC/D;YACA,MAAME,CAAC;UACT;QACF,CAAC;QACD,OAAOX,kBAAkB,CAACY,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;MAClD,CAAC,SAAS;QACRf,4BAAc,CAACS,OAAO,GAAGD,eAAe;MAC1C;IACF,CAAC;EACH;AACF","names":["isInvalidImporterPath","ex","code","_patch_base_1","__loadPluginPatched","originalLoadPlugin","prototype","_loadPlugin","name","importerPath","importerName","originalResolve","resolve","moduleName","relativeToPath","call","e","apply","arguments","ctx","filePath"],"sources":["C:\\Users\\ADMIN\\node_modules\\@rushstack\\eslint-patch\\src\\modern-module-resolution.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\n// This is a workaround for https://github.com/eslint/eslint/issues/3458\n//\n// To correct how ESLint searches for plugin packages, add this line to the top of your project's .eslintrc.js file:\n//\n//    require(\"@rushstack/eslint-patch/modern-module-resolution\");\n//\n\nimport {\n  configArrayFactory,\n  ModuleResolver,\n  isModuleResolutionError,\n  ESLINT_MAJOR_VERSION\n} from './_patch-base';\n\n// error: \"The argument 'filename' must be a file URL object, file URL string, or absolute path string. Received ''\"\nconst isInvalidImporterPath: (ex: unknown) => boolean = (ex) =>\n  (ex as { code: unknown } | undefined)?.code === 'ERR_INVALID_ARG_VALUE';\n\nif (!configArrayFactory.__loadPluginPatched) {\n  configArrayFactory.__loadPluginPatched = true;\n  // eslint-disable-next-line @typescript-eslint/typedef\n  const originalLoadPlugin = configArrayFactory.prototype._loadPlugin;\n\n  if (ESLINT_MAJOR_VERSION === 6) {\n    // ESLint 6.x\n    // https://github.com/eslint/eslint/blob/9738f8cc864d769988ccf42bb70f524444df1349/lib/cli-engine/config-array-factory.js#L915\n    configArrayFactory.prototype._loadPlugin = function (\n      name: string,\n      importerPath: string,\n      importerName: string\n    ) {\n      const originalResolve: (moduleName: string, relativeToPath: string) => string = ModuleResolver.resolve;\n      try {\n        ModuleResolver.resolve = function (moduleName: string, relativeToPath: string) {\n          try {\n            // resolve using importerPath instead of relativeToPath\n            return originalResolve.call(this, moduleName, importerPath);\n          } catch (e) {\n            if (isModuleResolutionError(e) || isInvalidImporterPath(e)) {\n              return originalResolve.call(this, moduleName, relativeToPath);\n            }\n            throw e;\n          }\n        };\n        return originalLoadPlugin.apply(this, arguments);\n      } finally {\n        ModuleResolver.resolve = originalResolve;\n      }\n    };\n  } else {\n    // ESLint 7.x || 8.x\n    // https://github.com/eslint/eslintrc/blob/242d569020dfe4f561e4503787b99ec016337457/lib/config-array-factory.js#L1023\n    configArrayFactory.prototype._loadPlugin = function (name: string, ctx: Record<string, unknown>) {\n      const originalResolve: (moduleName: string, relativeToPath: string | unknown) => string =\n        ModuleResolver.resolve;\n      try {\n        ModuleResolver.resolve = function (moduleName: string, relativeToPath: string) {\n          try {\n            // resolve using ctx.filePath instead of relativeToPath\n            return originalResolve.call(this, moduleName, ctx.filePath);\n          } catch (e) {\n            if (isModuleResolutionError(e) || isInvalidImporterPath(e)) {\n              return originalResolve.call(this, moduleName, relativeToPath);\n            }\n            throw e;\n          }\n        };\n        return originalLoadPlugin.apply(this, arguments);\n      } finally {\n        ModuleResolver.resolve = originalResolve;\n      }\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}