{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isExpressionStatement = exports.isExpression = exports.isExportSpecifier = exports.isExportDeclaration = exports.isExportAssignment = exports.isEnumMember = exports.isEnumDeclaration = exports.isEntityNameExpression = exports.isEntityName = exports.isEmptyStatement = exports.isElementAccessExpression = exports.isDoStatement = exports.isDeleteExpression = exports.isDefaultClause = exports.isDecorator = exports.isDebuggerStatement = exports.isComputedPropertyName = exports.isContinueStatement = exports.isConstructSignatureDeclaration = exports.isConstructorTypeNode = exports.isConstructorDeclaration = exports.isConditionalTypeNode = exports.isConditionalExpression = exports.isCommaListExpression = exports.isClassLikeDeclaration = exports.isClassExpression = exports.isClassDeclaration = exports.isCatchClause = exports.isCaseOrDefaultClause = exports.isCaseClause = exports.isCaseBlock = exports.isCallSignatureDeclaration = exports.isCallLikeExpression = exports.isCallExpression = exports.isBreakStatement = exports.isBreakOrContinueStatement = exports.isBooleanLiteral = exports.isBlockLike = exports.isBlock = exports.isBindingPattern = exports.isBindingElement = exports.isBinaryExpression = exports.isAwaitExpression = exports.isAssertionExpression = exports.isAsExpression = exports.isArrowFunction = exports.isArrayTypeNode = exports.isArrayLiteralExpression = exports.isArrayBindingPattern = exports.isAccessorDeclaration = void 0;\nexports.isNamespaceImport = exports.isNamespaceDeclaration = exports.isNamedImports = exports.isNamedExports = exports.isModuleDeclaration = exports.isModuleBlock = exports.isMethodSignature = exports.isMethodDeclaration = exports.isMetaProperty = exports.isMappedTypeNode = exports.isLiteralTypeNode = exports.isLiteralExpression = exports.isLabeledStatement = exports.isJsxText = exports.isJsxSpreadAttribute = exports.isJsxSelfClosingElement = exports.isJsxOpeningLikeElement = exports.isJsxOpeningFragment = exports.isJsxOpeningElement = exports.isJsxFragment = exports.isJsxExpression = exports.isJsxElement = exports.isJsxClosingFragment = exports.isJsxClosingElement = exports.isJsxAttributes = exports.isJsxAttributeLike = exports.isJsxAttribute = exports.isJsDoc = exports.isIterationStatement = exports.isIntersectionTypeNode = exports.isInterfaceDeclaration = exports.isInferTypeNode = exports.isIndexSignatureDeclaration = exports.isIndexedAccessTypeNode = exports.isImportSpecifier = exports.isImportEqualsDeclaration = exports.isImportDeclaration = exports.isImportClause = exports.isIfStatement = exports.isIdentifier = exports.isGetAccessorDeclaration = exports.isFunctionTypeNode = exports.isFunctionExpression = exports.isFunctionDeclaration = exports.isForStatement = exports.isForOfStatement = exports.isForInOrOfStatement = exports.isForInStatement = exports.isExternalModuleReference = exports.isExpressionWithTypeArguments = void 0;\nexports.isVariableStatement = exports.isVariableDeclaration = exports.isUnionTypeNode = exports.isTypeQueryNode = exports.isTypeReferenceNode = exports.isTypePredicateNode = exports.isTypeParameterDeclaration = exports.isTypeOperatorNode = exports.isTypeOfExpression = exports.isTypeLiteralNode = exports.isTypeAssertion = exports.isTypeAliasDeclaration = exports.isTupleTypeNode = exports.isTryStatement = exports.isThrowStatement = exports.isTextualLiteral = exports.isTemplateLiteral = exports.isTemplateExpression = exports.isTaggedTemplateExpression = exports.isSyntaxList = exports.isSwitchStatement = exports.isStringLiteral = exports.isSpreadElement = exports.isSpreadAssignment = exports.isSourceFile = exports.isSignatureDeclaration = exports.isShorthandPropertyAssignment = exports.isSetAccessorDeclaration = exports.isReturnStatement = exports.isRegularExpressionLiteral = exports.isQualifiedName = exports.isPropertySignature = exports.isPropertyDeclaration = exports.isPropertyAssignment = exports.isPropertyAccessExpression = exports.isPrefixUnaryExpression = exports.isPostfixUnaryExpression = exports.isParenthesizedTypeNode = exports.isParenthesizedExpression = exports.isParameterDeclaration = exports.isOmittedExpression = exports.isObjectLiteralExpression = exports.isObjectBindingPattern = exports.isNumericOrStringLikeLiteral = exports.isNumericLiteral = exports.isNullLiteral = exports.isNoSubstitutionTemplateLiteral = exports.isNonNullExpression = exports.isNewExpression = exports.isNamespaceExportDeclaration = void 0;\nexports.isWithStatement = exports.isWhileStatement = exports.isVoidExpression = exports.isVariableDeclarationList = void 0;\nconst ts = require(\"typescript\");\nfunction isAccessorDeclaration(node) {\n  return node.kind === ts.SyntaxKind.GetAccessor || node.kind === ts.SyntaxKind.SetAccessor;\n}\nexports.isAccessorDeclaration = isAccessorDeclaration;\nfunction isArrayBindingPattern(node) {\n  return node.kind === ts.SyntaxKind.ArrayBindingPattern;\n}\nexports.isArrayBindingPattern = isArrayBindingPattern;\nfunction isArrayLiteralExpression(node) {\n  return node.kind === ts.SyntaxKind.ArrayLiteralExpression;\n}\nexports.isArrayLiteralExpression = isArrayLiteralExpression;\nfunction isArrayTypeNode(node) {\n  return node.kind === ts.SyntaxKind.ArrayType;\n}\nexports.isArrayTypeNode = isArrayTypeNode;\nfunction isArrowFunction(node) {\n  return node.kind === ts.SyntaxKind.ArrowFunction;\n}\nexports.isArrowFunction = isArrowFunction;\nfunction isAsExpression(node) {\n  return node.kind === ts.SyntaxKind.AsExpression;\n}\nexports.isAsExpression = isAsExpression;\nfunction isAssertionExpression(node) {\n  return node.kind === ts.SyntaxKind.AsExpression || node.kind === ts.SyntaxKind.TypeAssertionExpression;\n}\nexports.isAssertionExpression = isAssertionExpression;\nfunction isAwaitExpression(node) {\n  return node.kind === ts.SyntaxKind.AwaitExpression;\n}\nexports.isAwaitExpression = isAwaitExpression;\nfunction isBinaryExpression(node) {\n  return node.kind === ts.SyntaxKind.BinaryExpression;\n}\nexports.isBinaryExpression = isBinaryExpression;\nfunction isBindingElement(node) {\n  return node.kind === ts.SyntaxKind.BindingElement;\n}\nexports.isBindingElement = isBindingElement;\nfunction isBindingPattern(node) {\n  return node.kind === ts.SyntaxKind.ArrayBindingPattern || node.kind === ts.SyntaxKind.ObjectBindingPattern;\n}\nexports.isBindingPattern = isBindingPattern;\nfunction isBlock(node) {\n  return node.kind === ts.SyntaxKind.Block;\n}\nexports.isBlock = isBlock;\nfunction isBlockLike(node) {\n  return node.statements !== undefined;\n}\nexports.isBlockLike = isBlockLike;\nfunction isBooleanLiteral(node) {\n  return node.kind === ts.SyntaxKind.TrueKeyword || node.kind === ts.SyntaxKind.FalseKeyword;\n}\nexports.isBooleanLiteral = isBooleanLiteral;\nfunction isBreakOrContinueStatement(node) {\n  return node.kind === ts.SyntaxKind.BreakStatement || node.kind === ts.SyntaxKind.ContinueStatement;\n}\nexports.isBreakOrContinueStatement = isBreakOrContinueStatement;\nfunction isBreakStatement(node) {\n  return node.kind === ts.SyntaxKind.BreakStatement;\n}\nexports.isBreakStatement = isBreakStatement;\nfunction isCallExpression(node) {\n  return node.kind === ts.SyntaxKind.CallExpression;\n}\nexports.isCallExpression = isCallExpression;\nfunction isCallLikeExpression(node) {\n  switch (node.kind) {\n    case ts.SyntaxKind.CallExpression:\n    case ts.SyntaxKind.Decorator:\n    case ts.SyntaxKind.JsxOpeningElement:\n    case ts.SyntaxKind.JsxSelfClosingElement:\n    case ts.SyntaxKind.NewExpression:\n    case ts.SyntaxKind.TaggedTemplateExpression:\n      return true;\n    default:\n      return false;\n  }\n}\nexports.isCallLikeExpression = isCallLikeExpression;\nfunction isCallSignatureDeclaration(node) {\n  return node.kind === ts.SyntaxKind.CallSignature;\n}\nexports.isCallSignatureDeclaration = isCallSignatureDeclaration;\nfunction isCaseBlock(node) {\n  return node.kind === ts.SyntaxKind.CaseBlock;\n}\nexports.isCaseBlock = isCaseBlock;\nfunction isCaseClause(node) {\n  return node.kind === ts.SyntaxKind.CaseClause;\n}\nexports.isCaseClause = isCaseClause;\nfunction isCaseOrDefaultClause(node) {\n  return node.kind === ts.SyntaxKind.CaseClause || node.kind === ts.SyntaxKind.DefaultClause;\n}\nexports.isCaseOrDefaultClause = isCaseOrDefaultClause;\nfunction isCatchClause(node) {\n  return node.kind === ts.SyntaxKind.CatchClause;\n}\nexports.isCatchClause = isCatchClause;\nfunction isClassDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ClassDeclaration;\n}\nexports.isClassDeclaration = isClassDeclaration;\nfunction isClassExpression(node) {\n  return node.kind === ts.SyntaxKind.ClassExpression;\n}\nexports.isClassExpression = isClassExpression;\nfunction isClassLikeDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ClassDeclaration || node.kind === ts.SyntaxKind.ClassExpression;\n}\nexports.isClassLikeDeclaration = isClassLikeDeclaration;\nfunction isCommaListExpression(node) {\n  return node.kind === ts.SyntaxKind.CommaListExpression;\n}\nexports.isCommaListExpression = isCommaListExpression;\nfunction isConditionalExpression(node) {\n  return node.kind === ts.SyntaxKind.ConditionalExpression;\n}\nexports.isConditionalExpression = isConditionalExpression;\nfunction isConditionalTypeNode(node) {\n  return node.kind === ts.SyntaxKind.ConditionalType;\n}\nexports.isConditionalTypeNode = isConditionalTypeNode;\nfunction isConstructorDeclaration(node) {\n  return node.kind === ts.SyntaxKind.Constructor;\n}\nexports.isConstructorDeclaration = isConstructorDeclaration;\nfunction isConstructorTypeNode(node) {\n  return node.kind === ts.SyntaxKind.ConstructorType;\n}\nexports.isConstructorTypeNode = isConstructorTypeNode;\nfunction isConstructSignatureDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ConstructSignature;\n}\nexports.isConstructSignatureDeclaration = isConstructSignatureDeclaration;\nfunction isContinueStatement(node) {\n  return node.kind === ts.SyntaxKind.ContinueStatement;\n}\nexports.isContinueStatement = isContinueStatement;\nfunction isComputedPropertyName(node) {\n  return node.kind === ts.SyntaxKind.ComputedPropertyName;\n}\nexports.isComputedPropertyName = isComputedPropertyName;\nfunction isDebuggerStatement(node) {\n  return node.kind === ts.SyntaxKind.DebuggerStatement;\n}\nexports.isDebuggerStatement = isDebuggerStatement;\nfunction isDecorator(node) {\n  return node.kind === ts.SyntaxKind.Decorator;\n}\nexports.isDecorator = isDecorator;\nfunction isDefaultClause(node) {\n  return node.kind === ts.SyntaxKind.DefaultClause;\n}\nexports.isDefaultClause = isDefaultClause;\nfunction isDeleteExpression(node) {\n  return node.kind === ts.SyntaxKind.DeleteExpression;\n}\nexports.isDeleteExpression = isDeleteExpression;\nfunction isDoStatement(node) {\n  return node.kind === ts.SyntaxKind.DoStatement;\n}\nexports.isDoStatement = isDoStatement;\nfunction isElementAccessExpression(node) {\n  return node.kind === ts.SyntaxKind.ElementAccessExpression;\n}\nexports.isElementAccessExpression = isElementAccessExpression;\nfunction isEmptyStatement(node) {\n  return node.kind === ts.SyntaxKind.EmptyStatement;\n}\nexports.isEmptyStatement = isEmptyStatement;\nfunction isEntityName(node) {\n  return node.kind === ts.SyntaxKind.Identifier || isQualifiedName(node);\n}\nexports.isEntityName = isEntityName;\nfunction isEntityNameExpression(node) {\n  return node.kind === ts.SyntaxKind.Identifier || isPropertyAccessExpression(node) && isEntityNameExpression(node.expression);\n}\nexports.isEntityNameExpression = isEntityNameExpression;\nfunction isEnumDeclaration(node) {\n  return node.kind === ts.SyntaxKind.EnumDeclaration;\n}\nexports.isEnumDeclaration = isEnumDeclaration;\nfunction isEnumMember(node) {\n  return node.kind === ts.SyntaxKind.EnumMember;\n}\nexports.isEnumMember = isEnumMember;\nfunction isExportAssignment(node) {\n  return node.kind === ts.SyntaxKind.ExportAssignment;\n}\nexports.isExportAssignment = isExportAssignment;\nfunction isExportDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ExportDeclaration;\n}\nexports.isExportDeclaration = isExportDeclaration;\nfunction isExportSpecifier(node) {\n  return node.kind === ts.SyntaxKind.ExportSpecifier;\n}\nexports.isExportSpecifier = isExportSpecifier;\nfunction isExpression(node) {\n  switch (node.kind) {\n    case ts.SyntaxKind.ArrayLiteralExpression:\n    case ts.SyntaxKind.ArrowFunction:\n    case ts.SyntaxKind.AsExpression:\n    case ts.SyntaxKind.AwaitExpression:\n    case ts.SyntaxKind.BinaryExpression:\n    case ts.SyntaxKind.CallExpression:\n    case ts.SyntaxKind.ClassExpression:\n    case ts.SyntaxKind.CommaListExpression:\n    case ts.SyntaxKind.ConditionalExpression:\n    case ts.SyntaxKind.DeleteExpression:\n    case ts.SyntaxKind.ElementAccessExpression:\n    case ts.SyntaxKind.FalseKeyword:\n    case ts.SyntaxKind.FunctionExpression:\n    case ts.SyntaxKind.Identifier:\n    case ts.SyntaxKind.JsxElement:\n    case ts.SyntaxKind.JsxFragment:\n    case ts.SyntaxKind.JsxExpression:\n    case ts.SyntaxKind.JsxOpeningElement:\n    case ts.SyntaxKind.JsxOpeningFragment:\n    case ts.SyntaxKind.JsxSelfClosingElement:\n    case ts.SyntaxKind.MetaProperty:\n    case ts.SyntaxKind.NewExpression:\n    case ts.SyntaxKind.NonNullExpression:\n    case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n    case ts.SyntaxKind.NullKeyword:\n    case ts.SyntaxKind.NumericLiteral:\n    case ts.SyntaxKind.ObjectLiteralExpression:\n    case ts.SyntaxKind.OmittedExpression:\n    case ts.SyntaxKind.ParenthesizedExpression:\n    case ts.SyntaxKind.PostfixUnaryExpression:\n    case ts.SyntaxKind.PrefixUnaryExpression:\n    case ts.SyntaxKind.PropertyAccessExpression:\n    case ts.SyntaxKind.RegularExpressionLiteral:\n    case ts.SyntaxKind.SpreadElement:\n    case ts.SyntaxKind.StringLiteral:\n    case ts.SyntaxKind.SuperKeyword:\n    case ts.SyntaxKind.TaggedTemplateExpression:\n    case ts.SyntaxKind.TemplateExpression:\n    case ts.SyntaxKind.ThisKeyword:\n    case ts.SyntaxKind.TrueKeyword:\n    case ts.SyntaxKind.TypeAssertionExpression:\n    case ts.SyntaxKind.TypeOfExpression:\n    case ts.SyntaxKind.VoidExpression:\n    case ts.SyntaxKind.YieldExpression:\n      return true;\n    default:\n      return false;\n  }\n}\nexports.isExpression = isExpression;\nfunction isExpressionStatement(node) {\n  return node.kind === ts.SyntaxKind.ExpressionStatement;\n}\nexports.isExpressionStatement = isExpressionStatement;\nfunction isExpressionWithTypeArguments(node) {\n  return node.kind === ts.SyntaxKind.ExpressionWithTypeArguments;\n}\nexports.isExpressionWithTypeArguments = isExpressionWithTypeArguments;\nfunction isExternalModuleReference(node) {\n  return node.kind === ts.SyntaxKind.ExternalModuleReference;\n}\nexports.isExternalModuleReference = isExternalModuleReference;\nfunction isForInStatement(node) {\n  return node.kind === ts.SyntaxKind.ForInStatement;\n}\nexports.isForInStatement = isForInStatement;\nfunction isForInOrOfStatement(node) {\n  return node.kind === ts.SyntaxKind.ForOfStatement || node.kind === ts.SyntaxKind.ForInStatement;\n}\nexports.isForInOrOfStatement = isForInOrOfStatement;\nfunction isForOfStatement(node) {\n  return node.kind === ts.SyntaxKind.ForOfStatement;\n}\nexports.isForOfStatement = isForOfStatement;\nfunction isForStatement(node) {\n  return node.kind === ts.SyntaxKind.ForStatement;\n}\nexports.isForStatement = isForStatement;\nfunction isFunctionDeclaration(node) {\n  return node.kind === ts.SyntaxKind.FunctionDeclaration;\n}\nexports.isFunctionDeclaration = isFunctionDeclaration;\nfunction isFunctionExpression(node) {\n  return node.kind === ts.SyntaxKind.FunctionExpression;\n}\nexports.isFunctionExpression = isFunctionExpression;\nfunction isFunctionTypeNode(node) {\n  return node.kind === ts.SyntaxKind.FunctionType;\n}\nexports.isFunctionTypeNode = isFunctionTypeNode;\nfunction isGetAccessorDeclaration(node) {\n  return node.kind === ts.SyntaxKind.GetAccessor;\n}\nexports.isGetAccessorDeclaration = isGetAccessorDeclaration;\nfunction isIdentifier(node) {\n  return node.kind === ts.SyntaxKind.Identifier;\n}\nexports.isIdentifier = isIdentifier;\nfunction isIfStatement(node) {\n  return node.kind === ts.SyntaxKind.IfStatement;\n}\nexports.isIfStatement = isIfStatement;\nfunction isImportClause(node) {\n  return node.kind === ts.SyntaxKind.ImportClause;\n}\nexports.isImportClause = isImportClause;\nfunction isImportDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ImportDeclaration;\n}\nexports.isImportDeclaration = isImportDeclaration;\nfunction isImportEqualsDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ImportEqualsDeclaration;\n}\nexports.isImportEqualsDeclaration = isImportEqualsDeclaration;\nfunction isImportSpecifier(node) {\n  return node.kind === ts.SyntaxKind.ImportSpecifier;\n}\nexports.isImportSpecifier = isImportSpecifier;\nfunction isIndexedAccessTypeNode(node) {\n  return node.kind === ts.SyntaxKind.IndexedAccessType;\n}\nexports.isIndexedAccessTypeNode = isIndexedAccessTypeNode;\nfunction isIndexSignatureDeclaration(node) {\n  return node.kind === ts.SyntaxKind.IndexSignature;\n}\nexports.isIndexSignatureDeclaration = isIndexSignatureDeclaration;\nfunction isInferTypeNode(node) {\n  return node.kind === ts.SyntaxKind.InferType;\n}\nexports.isInferTypeNode = isInferTypeNode;\nfunction isInterfaceDeclaration(node) {\n  return node.kind === ts.SyntaxKind.InterfaceDeclaration;\n}\nexports.isInterfaceDeclaration = isInterfaceDeclaration;\nfunction isIntersectionTypeNode(node) {\n  return node.kind === ts.SyntaxKind.IntersectionType;\n}\nexports.isIntersectionTypeNode = isIntersectionTypeNode;\nfunction isIterationStatement(node) {\n  switch (node.kind) {\n    case ts.SyntaxKind.ForStatement:\n    case ts.SyntaxKind.ForOfStatement:\n    case ts.SyntaxKind.ForInStatement:\n    case ts.SyntaxKind.WhileStatement:\n    case ts.SyntaxKind.DoStatement:\n      return true;\n    default:\n      return false;\n  }\n}\nexports.isIterationStatement = isIterationStatement;\nfunction isJsDoc(node) {\n  return node.kind === ts.SyntaxKind.JSDocComment;\n}\nexports.isJsDoc = isJsDoc;\nfunction isJsxAttribute(node) {\n  return node.kind === ts.SyntaxKind.JsxAttribute;\n}\nexports.isJsxAttribute = isJsxAttribute;\nfunction isJsxAttributeLike(node) {\n  return node.kind === ts.SyntaxKind.JsxAttribute || node.kind === ts.SyntaxKind.JsxSpreadAttribute;\n}\nexports.isJsxAttributeLike = isJsxAttributeLike;\nfunction isJsxAttributes(node) {\n  return node.kind === ts.SyntaxKind.JsxAttributes;\n}\nexports.isJsxAttributes = isJsxAttributes;\nfunction isJsxClosingElement(node) {\n  return node.kind === ts.SyntaxKind.JsxClosingElement;\n}\nexports.isJsxClosingElement = isJsxClosingElement;\nfunction isJsxClosingFragment(node) {\n  return node.kind === ts.SyntaxKind.JsxClosingFragment;\n}\nexports.isJsxClosingFragment = isJsxClosingFragment;\nfunction isJsxElement(node) {\n  return node.kind === ts.SyntaxKind.JsxElement;\n}\nexports.isJsxElement = isJsxElement;\nfunction isJsxExpression(node) {\n  return node.kind === ts.SyntaxKind.JsxExpression;\n}\nexports.isJsxExpression = isJsxExpression;\nfunction isJsxFragment(node) {\n  return node.kind === ts.SyntaxKind.JsxFragment;\n}\nexports.isJsxFragment = isJsxFragment;\nfunction isJsxOpeningElement(node) {\n  return node.kind === ts.SyntaxKind.JsxOpeningElement;\n}\nexports.isJsxOpeningElement = isJsxOpeningElement;\nfunction isJsxOpeningFragment(node) {\n  return node.kind === ts.SyntaxKind.JsxOpeningFragment;\n}\nexports.isJsxOpeningFragment = isJsxOpeningFragment;\nfunction isJsxOpeningLikeElement(node) {\n  return node.kind === ts.SyntaxKind.JsxOpeningElement || node.kind === ts.SyntaxKind.JsxSelfClosingElement;\n}\nexports.isJsxOpeningLikeElement = isJsxOpeningLikeElement;\nfunction isJsxSelfClosingElement(node) {\n  return node.kind === ts.SyntaxKind.JsxSelfClosingElement;\n}\nexports.isJsxSelfClosingElement = isJsxSelfClosingElement;\nfunction isJsxSpreadAttribute(node) {\n  return node.kind === ts.SyntaxKind.JsxSpreadAttribute;\n}\nexports.isJsxSpreadAttribute = isJsxSpreadAttribute;\nfunction isJsxText(node) {\n  return node.kind === ts.SyntaxKind.JsxText;\n}\nexports.isJsxText = isJsxText;\nfunction isLabeledStatement(node) {\n  return node.kind === ts.SyntaxKind.LabeledStatement;\n}\nexports.isLabeledStatement = isLabeledStatement;\nfunction isLiteralExpression(node) {\n  return node.kind >= ts.SyntaxKind.FirstLiteralToken && node.kind <= ts.SyntaxKind.LastLiteralToken;\n}\nexports.isLiteralExpression = isLiteralExpression;\nfunction isLiteralTypeNode(node) {\n  return node.kind === ts.SyntaxKind.LiteralType;\n}\nexports.isLiteralTypeNode = isLiteralTypeNode;\nfunction isMappedTypeNode(node) {\n  return node.kind === ts.SyntaxKind.MappedType;\n}\nexports.isMappedTypeNode = isMappedTypeNode;\nfunction isMetaProperty(node) {\n  return node.kind === ts.SyntaxKind.MetaProperty;\n}\nexports.isMetaProperty = isMetaProperty;\nfunction isMethodDeclaration(node) {\n  return node.kind === ts.SyntaxKind.MethodDeclaration;\n}\nexports.isMethodDeclaration = isMethodDeclaration;\nfunction isMethodSignature(node) {\n  return node.kind === ts.SyntaxKind.MethodSignature;\n}\nexports.isMethodSignature = isMethodSignature;\nfunction isModuleBlock(node) {\n  return node.kind === ts.SyntaxKind.ModuleBlock;\n}\nexports.isModuleBlock = isModuleBlock;\nfunction isModuleDeclaration(node) {\n  return node.kind === ts.SyntaxKind.ModuleDeclaration;\n}\nexports.isModuleDeclaration = isModuleDeclaration;\nfunction isNamedExports(node) {\n  return node.kind === ts.SyntaxKind.NamedExports;\n}\nexports.isNamedExports = isNamedExports;\nfunction isNamedImports(node) {\n  return node.kind === ts.SyntaxKind.NamedImports;\n}\nexports.isNamedImports = isNamedImports;\nfunction isNamespaceDeclaration(node) {\n  return isModuleDeclaration(node) && node.name.kind === ts.SyntaxKind.Identifier && node.body !== undefined && (node.body.kind === ts.SyntaxKind.ModuleBlock || isNamespaceDeclaration(node.body));\n}\nexports.isNamespaceDeclaration = isNamespaceDeclaration;\nfunction isNamespaceImport(node) {\n  return node.kind === ts.SyntaxKind.NamespaceImport;\n}\nexports.isNamespaceImport = isNamespaceImport;\nfunction isNamespaceExportDeclaration(node) {\n  return node.kind === ts.SyntaxKind.NamespaceExportDeclaration;\n}\nexports.isNamespaceExportDeclaration = isNamespaceExportDeclaration;\nfunction isNewExpression(node) {\n  return node.kind === ts.SyntaxKind.NewExpression;\n}\nexports.isNewExpression = isNewExpression;\nfunction isNonNullExpression(node) {\n  return node.kind === ts.SyntaxKind.NonNullExpression;\n}\nexports.isNonNullExpression = isNonNullExpression;\nfunction isNoSubstitutionTemplateLiteral(node) {\n  return node.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral;\n}\nexports.isNoSubstitutionTemplateLiteral = isNoSubstitutionTemplateLiteral;\nfunction isNullLiteral(node) {\n  return node.kind === ts.SyntaxKind.NullKeyword;\n}\nexports.isNullLiteral = isNullLiteral;\nfunction isNumericLiteral(node) {\n  return node.kind === ts.SyntaxKind.NumericLiteral;\n}\nexports.isNumericLiteral = isNumericLiteral;\nfunction isNumericOrStringLikeLiteral(node) {\n  switch (node.kind) {\n    case ts.SyntaxKind.StringLiteral:\n    case ts.SyntaxKind.NumericLiteral:\n    case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n      return true;\n    default:\n      return false;\n  }\n}\nexports.isNumericOrStringLikeLiteral = isNumericOrStringLikeLiteral;\nfunction isObjectBindingPattern(node) {\n  return node.kind === ts.SyntaxKind.ObjectBindingPattern;\n}\nexports.isObjectBindingPattern = isObjectBindingPattern;\nfunction isObjectLiteralExpression(node) {\n  return node.kind === ts.SyntaxKind.ObjectLiteralExpression;\n}\nexports.isObjectLiteralExpression = isObjectLiteralExpression;\nfunction isOmittedExpression(node) {\n  return node.kind === ts.SyntaxKind.OmittedExpression;\n}\nexports.isOmittedExpression = isOmittedExpression;\nfunction isParameterDeclaration(node) {\n  return node.kind === ts.SyntaxKind.Parameter;\n}\nexports.isParameterDeclaration = isParameterDeclaration;\nfunction isParenthesizedExpression(node) {\n  return node.kind === ts.SyntaxKind.ParenthesizedExpression;\n}\nexports.isParenthesizedExpression = isParenthesizedExpression;\nfunction isParenthesizedTypeNode(node) {\n  return node.kind === ts.SyntaxKind.ParenthesizedType;\n}\nexports.isParenthesizedTypeNode = isParenthesizedTypeNode;\nfunction isPostfixUnaryExpression(node) {\n  return node.kind === ts.SyntaxKind.PostfixUnaryExpression;\n}\nexports.isPostfixUnaryExpression = isPostfixUnaryExpression;\nfunction isPrefixUnaryExpression(node) {\n  return node.kind === ts.SyntaxKind.PrefixUnaryExpression;\n}\nexports.isPrefixUnaryExpression = isPrefixUnaryExpression;\nfunction isPropertyAccessExpression(node) {\n  return node.kind === ts.SyntaxKind.PropertyAccessExpression;\n}\nexports.isPropertyAccessExpression = isPropertyAccessExpression;\nfunction isPropertyAssignment(node) {\n  return node.kind === ts.SyntaxKind.PropertyAssignment;\n}\nexports.isPropertyAssignment = isPropertyAssignment;\nfunction isPropertyDeclaration(node) {\n  return node.kind === ts.SyntaxKind.PropertyDeclaration;\n}\nexports.isPropertyDeclaration = isPropertyDeclaration;\nfunction isPropertySignature(node) {\n  return node.kind === ts.SyntaxKind.PropertySignature;\n}\nexports.isPropertySignature = isPropertySignature;\nfunction isQualifiedName(node) {\n  return node.kind === ts.SyntaxKind.QualifiedName;\n}\nexports.isQualifiedName = isQualifiedName;\nfunction isRegularExpressionLiteral(node) {\n  return node.kind === ts.SyntaxKind.RegularExpressionLiteral;\n}\nexports.isRegularExpressionLiteral = isRegularExpressionLiteral;\nfunction isReturnStatement(node) {\n  return node.kind === ts.SyntaxKind.ReturnStatement;\n}\nexports.isReturnStatement = isReturnStatement;\nfunction isSetAccessorDeclaration(node) {\n  return node.kind === ts.SyntaxKind.SetAccessor;\n}\nexports.isSetAccessorDeclaration = isSetAccessorDeclaration;\nfunction isShorthandPropertyAssignment(node) {\n  return node.kind === ts.SyntaxKind.ShorthandPropertyAssignment;\n}\nexports.isShorthandPropertyAssignment = isShorthandPropertyAssignment;\nfunction isSignatureDeclaration(node) {\n  return node.parameters !== undefined;\n}\nexports.isSignatureDeclaration = isSignatureDeclaration;\nfunction isSourceFile(node) {\n  return node.kind === ts.SyntaxKind.SourceFile;\n}\nexports.isSourceFile = isSourceFile;\nfunction isSpreadAssignment(node) {\n  return node.kind === ts.SyntaxKind.SpreadAssignment;\n}\nexports.isSpreadAssignment = isSpreadAssignment;\nfunction isSpreadElement(node) {\n  return node.kind === ts.SyntaxKind.SpreadElement;\n}\nexports.isSpreadElement = isSpreadElement;\nfunction isStringLiteral(node) {\n  return node.kind === ts.SyntaxKind.StringLiteral;\n}\nexports.isStringLiteral = isStringLiteral;\nfunction isSwitchStatement(node) {\n  return node.kind === ts.SyntaxKind.SwitchStatement;\n}\nexports.isSwitchStatement = isSwitchStatement;\nfunction isSyntaxList(node) {\n  return node.kind === ts.SyntaxKind.SyntaxList;\n}\nexports.isSyntaxList = isSyntaxList;\nfunction isTaggedTemplateExpression(node) {\n  return node.kind === ts.SyntaxKind.TaggedTemplateExpression;\n}\nexports.isTaggedTemplateExpression = isTaggedTemplateExpression;\nfunction isTemplateExpression(node) {\n  return node.kind === ts.SyntaxKind.TemplateExpression;\n}\nexports.isTemplateExpression = isTemplateExpression;\nfunction isTemplateLiteral(node) {\n  return node.kind === ts.SyntaxKind.TemplateExpression || node.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral;\n}\nexports.isTemplateLiteral = isTemplateLiteral;\nfunction isTextualLiteral(node) {\n  return node.kind === ts.SyntaxKind.StringLiteral || node.kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral;\n}\nexports.isTextualLiteral = isTextualLiteral;\nfunction isThrowStatement(node) {\n  return node.kind === ts.SyntaxKind.ThrowStatement;\n}\nexports.isThrowStatement = isThrowStatement;\nfunction isTryStatement(node) {\n  return node.kind === ts.SyntaxKind.TryStatement;\n}\nexports.isTryStatement = isTryStatement;\nfunction isTupleTypeNode(node) {\n  return node.kind === ts.SyntaxKind.TupleType;\n}\nexports.isTupleTypeNode = isTupleTypeNode;\nfunction isTypeAliasDeclaration(node) {\n  return node.kind === ts.SyntaxKind.TypeAliasDeclaration;\n}\nexports.isTypeAliasDeclaration = isTypeAliasDeclaration;\nfunction isTypeAssertion(node) {\n  return node.kind === ts.SyntaxKind.TypeAssertionExpression;\n}\nexports.isTypeAssertion = isTypeAssertion;\nfunction isTypeLiteralNode(node) {\n  return node.kind === ts.SyntaxKind.TypeLiteral;\n}\nexports.isTypeLiteralNode = isTypeLiteralNode;\nfunction isTypeOfExpression(node) {\n  return node.kind === ts.SyntaxKind.TypeOfExpression;\n}\nexports.isTypeOfExpression = isTypeOfExpression;\nfunction isTypeOperatorNode(node) {\n  return node.kind === ts.SyntaxKind.TypeOperator;\n}\nexports.isTypeOperatorNode = isTypeOperatorNode;\nfunction isTypeParameterDeclaration(node) {\n  return node.kind === ts.SyntaxKind.TypeParameter;\n}\nexports.isTypeParameterDeclaration = isTypeParameterDeclaration;\nfunction isTypePredicateNode(node) {\n  return node.kind === ts.SyntaxKind.TypePredicate;\n}\nexports.isTypePredicateNode = isTypePredicateNode;\nfunction isTypeReferenceNode(node) {\n  return node.kind === ts.SyntaxKind.TypeReference;\n}\nexports.isTypeReferenceNode = isTypeReferenceNode;\nfunction isTypeQueryNode(node) {\n  return node.kind === ts.SyntaxKind.TypeQuery;\n}\nexports.isTypeQueryNode = isTypeQueryNode;\nfunction isUnionTypeNode(node) {\n  return node.kind === ts.SyntaxKind.UnionType;\n}\nexports.isUnionTypeNode = isUnionTypeNode;\nfunction isVariableDeclaration(node) {\n  return node.kind === ts.SyntaxKind.VariableDeclaration;\n}\nexports.isVariableDeclaration = isVariableDeclaration;\nfunction isVariableStatement(node) {\n  return node.kind === ts.SyntaxKind.VariableStatement;\n}\nexports.isVariableStatement = isVariableStatement;\nfunction isVariableDeclarationList(node) {\n  return node.kind === ts.SyntaxKind.VariableDeclarationList;\n}\nexports.isVariableDeclarationList = isVariableDeclarationList;\nfunction isVoidExpression(node) {\n  return node.kind === ts.SyntaxKind.VoidExpression;\n}\nexports.isVoidExpression = isVoidExpression;\nfunction isWhileStatement(node) {\n  return node.kind === ts.SyntaxKind.WhileStatement;\n}\nexports.isWhileStatement = isWhileStatement;\nfunction isWithStatement(node) {\n  return node.kind === ts.SyntaxKind.WithStatement;\n}\nexports.isWithStatement = isWithStatement;","map":{"version":3,"mappings":"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","names":["isAccessorDeclaration","node","kind","ts","SyntaxKind","GetAccessor","SetAccessor","exports","isArrayBindingPattern","ArrayBindingPattern","isArrayLiteralExpression","ArrayLiteralExpression","isArrayTypeNode","ArrayType","isArrowFunction","ArrowFunction","isAsExpression","AsExpression","isAssertionExpression","TypeAssertionExpression","isAwaitExpression","AwaitExpression","isBinaryExpression","BinaryExpression","isBindingElement","BindingElement","isBindingPattern","ObjectBindingPattern","isBlock","Block","isBlockLike","statements","undefined","isBooleanLiteral","TrueKeyword","FalseKeyword","isBreakOrContinueStatement","BreakStatement","ContinueStatement","isBreakStatement","isCallExpression","CallExpression","isCallLikeExpression","Decorator","JsxOpeningElement","JsxSelfClosingElement","NewExpression","TaggedTemplateExpression","isCallSignatureDeclaration","CallSignature","isCaseBlock","CaseBlock","isCaseClause","CaseClause","isCaseOrDefaultClause","DefaultClause","isCatchClause","CatchClause","isClassDeclaration","ClassDeclaration","isClassExpression","ClassExpression","isClassLikeDeclaration","isCommaListExpression","CommaListExpression","isConditionalExpression","ConditionalExpression","isConditionalTypeNode","ConditionalType","isConstructorDeclaration","Constructor","isConstructorTypeNode","ConstructorType","isConstructSignatureDeclaration","ConstructSignature","isContinueStatement","isComputedPropertyName","ComputedPropertyName","isDebuggerStatement","DebuggerStatement","isDecorator","isDefaultClause","isDeleteExpression","DeleteExpression","isDoStatement","DoStatement","isElementAccessExpression","ElementAccessExpression","isEmptyStatement","EmptyStatement","isEntityName","Identifier","isQualifiedName","isEntityNameExpression","isPropertyAccessExpression","expression","isEnumDeclaration","EnumDeclaration","isEnumMember","EnumMember","isExportAssignment","ExportAssignment","isExportDeclaration","ExportDeclaration","isExportSpecifier","ExportSpecifier","isExpression","FunctionExpression","JsxElement","JsxFragment","JsxExpression","JsxOpeningFragment","MetaProperty","NonNullExpression","NoSubstitutionTemplateLiteral","NullKeyword","NumericLiteral","ObjectLiteralExpression","OmittedExpression","ParenthesizedExpression","PostfixUnaryExpression","PrefixUnaryExpression","PropertyAccessExpression","RegularExpressionLiteral","SpreadElement","StringLiteral","SuperKeyword","TemplateExpression","ThisKeyword","TypeOfExpression","VoidExpression","YieldExpression","isExpressionStatement","ExpressionStatement","isExpressionWithTypeArguments","ExpressionWithTypeArguments","isExternalModuleReference","ExternalModuleReference","isForInStatement","ForInStatement","isForInOrOfStatement","ForOfStatement","isForOfStatement","isForStatement","ForStatement","isFunctionDeclaration","FunctionDeclaration","isFunctionExpression","isFunctionTypeNode","FunctionType","isGetAccessorDeclaration","isIdentifier","isIfStatement","IfStatement","isImportClause","ImportClause","isImportDeclaration","ImportDeclaration","isImportEqualsDeclaration","ImportEqualsDeclaration","isImportSpecifier","ImportSpecifier","isIndexedAccessTypeNode","IndexedAccessType","isIndexSignatureDeclaration","IndexSignature","isInferTypeNode","InferType","isInterfaceDeclaration","InterfaceDeclaration","isIntersectionTypeNode","IntersectionType","isIterationStatement","WhileStatement","isJsDoc","JSDocComment","isJsxAttribute","JsxAttribute","isJsxAttributeLike","JsxSpreadAttribute","isJsxAttributes","JsxAttributes","isJsxClosingElement","JsxClosingElement","isJsxClosingFragment","JsxClosingFragment","isJsxElement","isJsxExpression","isJsxFragment","isJsxOpeningElement","isJsxOpeningFragment","isJsxOpeningLikeElement","isJsxSelfClosingElement","isJsxSpreadAttribute","isJsxText","JsxText","isLabeledStatement","LabeledStatement","isLiteralExpression","FirstLiteralToken","LastLiteralToken","isLiteralTypeNode","LiteralType","isMappedTypeNode","MappedType","isMetaProperty","isMethodDeclaration","MethodDeclaration","isMethodSignature","MethodSignature","isModuleBlock","ModuleBlock","isModuleDeclaration","ModuleDeclaration","isNamedExports","NamedExports","isNamedImports","NamedImports","isNamespaceDeclaration","name","body","isNamespaceImport","NamespaceImport","isNamespaceExportDeclaration","NamespaceExportDeclaration","isNewExpression","isNonNullExpression","isNoSubstitutionTemplateLiteral","isNullLiteral","isNumericLiteral","isNumericOrStringLikeLiteral","isObjectBindingPattern","isObjectLiteralExpression","isOmittedExpression","isParameterDeclaration","Parameter","isParenthesizedExpression","isParenthesizedTypeNode","ParenthesizedType","isPostfixUnaryExpression","isPrefixUnaryExpression","isPropertyAssignment","PropertyAssignment","isPropertyDeclaration","PropertyDeclaration","isPropertySignature","PropertySignature","QualifiedName","isRegularExpressionLiteral","isReturnStatement","ReturnStatement","isSetAccessorDeclaration","isShorthandPropertyAssignment","ShorthandPropertyAssignment","isSignatureDeclaration","parameters","isSourceFile","SourceFile","isSpreadAssignment","SpreadAssignment","isSpreadElement","isStringLiteral","isSwitchStatement","SwitchStatement","isSyntaxList","SyntaxList","isTaggedTemplateExpression","isTemplateExpression","isTemplateLiteral","isTextualLiteral","isThrowStatement","ThrowStatement","isTryStatement","TryStatement","isTupleTypeNode","TupleType","isTypeAliasDeclaration","TypeAliasDeclaration","isTypeAssertion","isTypeLiteralNode","TypeLiteral","isTypeOfExpression","isTypeOperatorNode","TypeOperator","isTypeParameterDeclaration","TypeParameter","isTypePredicateNode","TypePredicate","isTypeReferenceNode","TypeReference","isTypeQueryNode","TypeQuery","isUnionTypeNode","UnionType","isVariableDeclaration","VariableDeclaration","isVariableStatement","VariableStatement","isVariableDeclarationList","VariableDeclarationList","isVoidExpression","isWhileStatement","isWithStatement","WithStatement"],"sources":["node.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}