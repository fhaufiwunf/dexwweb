{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProgramFromConfigFile = exports.useProvidedPrograms = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst ts = __importStar(require(\"typescript\"));\nconst shared_1 = require(\"./shared\");\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:useProvidedProgram');\nfunction useProvidedPrograms(programInstances, parseSettings) {\n  log('Retrieving ast for %s from provided program instance(s)', parseSettings.filePath);\n  let astAndProgram;\n  for (const programInstance of programInstances) {\n    astAndProgram = (0, shared_1.getAstFromProgram)(programInstance, parseSettings);\n    // Stop at the first applicable program instance\n    if (astAndProgram) {\n      break;\n    }\n  }\n  if (!astAndProgram) {\n    const relativeFilePath = path.relative(parseSettings.tsconfigRootDir || process.cwd(), parseSettings.filePath);\n    const errorLines = ['\"parserOptions.programs\" has been provided for @typescript-eslint/parser.', `The file was not found in any of the provided program instance(s): ${relativeFilePath}`];\n    throw new Error(errorLines.join('\\n'));\n  }\n  astAndProgram.program.getTypeChecker(); // ensure parent pointers are set in source files\n  return astAndProgram;\n}\nexports.useProvidedPrograms = useProvidedPrograms;\n/**\n * Utility offered by parser to help consumers construct their own program instance.\n *\n * @param configFile the path to the tsconfig.json file, relative to `projectDirectory`\n * @param projectDirectory the project directory to use as the CWD, defaults to `process.cwd()`\n */\nfunction createProgramFromConfigFile(configFile, projectDirectory) {\n  if (ts.sys === undefined) {\n    throw new Error('`createProgramFromConfigFile` is only supported in a Node-like environment.');\n  }\n  const parsed = ts.getParsedCommandLineOfConfigFile(configFile, shared_1.CORE_COMPILER_OPTIONS, {\n    onUnRecoverableConfigFileDiagnostic: diag => {\n      throw new Error(formatDiagnostics([diag])); // ensures that `parsed` is defined.\n    },\n    fileExists: fs.existsSync,\n    getCurrentDirectory: () => projectDirectory && path.resolve(projectDirectory) || process.cwd(),\n    readDirectory: ts.sys.readDirectory,\n    readFile: file => fs.readFileSync(file, 'utf-8'),\n    useCaseSensitiveFileNames: ts.sys.useCaseSensitiveFileNames\n  });\n  const result = parsed; // parsed is not undefined, since we throw on failure.\n  if (result.errors.length) {\n    throw new Error(formatDiagnostics(result.errors));\n  }\n  const host = ts.createCompilerHost(result.options, true);\n  return ts.createProgram(result.fileNames, result.options, host);\n}\nexports.createProgramFromConfigFile = createProgramFromConfigFile;\nfunction formatDiagnostics(diagnostics) {\n  return ts.formatDiagnostics(diagnostics, {\n    getCanonicalFileName: f => f,\n    getCurrentDirectory: process.cwd,\n    getNewLine: () => '\\n'\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAIA;AAEA,MAAMA,GAAG,GAAG,mBAAK,EAAC,wDAAwD,CAAC;AAE3E,SAASC,mBAAmBA,CAC1BC,gBAAsC,EACtCC,aAA4B;EAE5BH,GAAG,CACD,yDAAyD,EACzDG,aAAa,CAACC,QAAQ,CACvB;EAED,IAAIC,aAAwC;EAC5C,KAAK,MAAMC,eAAe,IAAIJ,gBAAgB,EAAE;IAC9CG,aAAa,GAAG,8BAAiB,EAACC,eAAe,EAAEH,aAAa,CAAC;IACjE;IACA,IAAIE,aAAa,EAAE;MACjB;;;EAIJ,IAAI,CAACA,aAAa,EAAE;IAClB,MAAME,gBAAgB,GAAGC,IAAI,CAACC,QAAQ,CACpCN,aAAa,CAACO,eAAe,IAAIC,OAAO,CAACC,GAAG,EAAE,EAC9CT,aAAa,CAACC,QAAQ,CACvB;IACD,MAAMS,UAAU,GAAG,CACjB,2EAA2E,EAC3E,sEAAsEN,gBAAgB,EAAE,CACzF;IAED,MAAM,IAAIO,KAAK,CAACD,UAAU,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC;;EAGxCV,aAAa,CAACW,OAAO,CAACC,cAAc,EAAE,CAAC,CAAC;EAExC,OAAOZ,aAAa;AACtB;AAiDSa;AA/CT;;;;;;AAMA,SAASC,2BAA2BA,CAClCC,UAAkB,EAClBC,gBAAyB;EAEzB,IAAIC,EAAE,CAACC,GAAG,KAAKC,SAAS,EAAE;IACxB,MAAM,IAAIV,KAAK,CACb,6EAA6E,CAC9E;;EAGH,MAAMW,MAAM,GAAGH,EAAE,CAACI,gCAAgC,CAChDN,UAAU,EACVO,8BAAqB,EACrB;IACEC,mCAAmC,EAAEC,IAAI,IAAG;MAC1C,MAAM,IAAIf,KAAK,CAACgB,iBAAiB,CAAC,CAACD,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC;IACDE,UAAU,EAAEC,EAAE,CAACC,UAAU;IACzBC,mBAAmB,EAAEA,MAClBb,gBAAgB,IAAIb,IAAI,CAAC2B,OAAO,CAACd,gBAAgB,CAAC,IAAKV,OAAO,CAACC,GAAG,EAAE;IACvEwB,aAAa,EAAEd,EAAE,CAACC,GAAG,CAACa,aAAa;IACnCC,QAAQ,EAAEC,IAAI,IAAIN,EAAE,CAACO,YAAY,CAACD,IAAI,EAAE,OAAO,CAAC;IAChDE,yBAAyB,EAAElB,EAAE,CAACC,GAAG,CAACiB;GACnC,CACF;EACD,MAAMC,MAAM,GAAGhB,MAAO,CAAC,CAAC;EACxB,IAAIgB,MAAM,CAACC,MAAM,CAACC,MAAM,EAAE;IACxB,MAAM,IAAI7B,KAAK,CAACgB,iBAAiB,CAACW,MAAM,CAACC,MAAM,CAAC,CAAC;;EAEnD,MAAME,IAAI,GAAGtB,EAAE,CAACuB,kBAAkB,CAACJ,MAAM,CAACK,OAAO,EAAE,IAAI,CAAC;EACxD,OAAOxB,EAAE,CAACyB,aAAa,CAACN,MAAM,CAACO,SAAS,EAAEP,MAAM,CAACK,OAAO,EAAEF,IAAI,CAAC;AACjE;AAU8B1B;AAR9B,SAASY,iBAAiBA,CAACmB,WAA4B;EACrD,OAAO3B,EAAE,CAACQ,iBAAiB,CAACmB,WAAW,EAAE;IACvCC,oBAAoB,EAAEC,CAAC,IAAIA,CAAC;IAC5BjB,mBAAmB,EAAEvB,OAAO,CAACC,GAAG;IAChCwC,UAAU,EAAEA,MAAM;GACnB,CAAC;AACJ","names":["log","useProvidedPrograms","programInstances","parseSettings","filePath","astAndProgram","programInstance","relativeFilePath","path","relative","tsconfigRootDir","process","cwd","errorLines","Error","join","program","getTypeChecker","exports","createProgramFromConfigFile","configFile","projectDirectory","ts","sys","undefined","parsed","getParsedCommandLineOfConfigFile","shared_1","onUnRecoverableConfigFileDiagnostic","diag","formatDiagnostics","fileExists","fs","existsSync","getCurrentDirectory","resolve","readDirectory","readFile","file","readFileSync","useCaseSensitiveFileNames","result","errors","length","host","createCompilerHost","options","createProgram","fileNames","diagnostics","getCanonicalFileName","f","getNewLine"],"sources":["../../src/create-program/useProvidedPrograms.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}