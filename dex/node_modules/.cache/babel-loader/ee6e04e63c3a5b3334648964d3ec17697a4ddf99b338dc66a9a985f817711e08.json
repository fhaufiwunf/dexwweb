{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProjectConfigFiles = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs = __importStar(require(\"fs\"));\nconst path = __importStar(require(\"path\"));\nconst log = (0, debug_1.default)('typescript-eslint:typescript-estree:getProjectConfigFiles');\n/**\n * Checks for a matching TSConfig to a file including its parent directories,\n * permanently caching results under each directory it checks.\n *\n * @remarks\n * We don't (yet!) have a way to attach file watchers on disk, but still need to\n * cache file checks for rapid subsequent calls to fs.existsSync. See discussion\n * in https://github.com/typescript-eslint/typescript-eslint/issues/101.\n */\nfunction getProjectConfigFiles(parseSettings, project) {\n  var _a;\n  if (project !== true) {\n    return project === undefined || Array.isArray(project) ? project : [project];\n  }\n  log('Looking for tsconfig.json at or above file: %s', parseSettings.filePath);\n  let directory = path.dirname(parseSettings.filePath);\n  const checkedDirectories = [directory];\n  do {\n    log('Checking tsconfig.json path: %s', directory);\n    const tsconfigPath = path.join(directory, 'tsconfig.json');\n    const cached = (_a = parseSettings.tsconfigMatchCache.get(directory)) !== null && _a !== void 0 ? _a : fs.existsSync(tsconfigPath) && tsconfigPath;\n    if (cached) {\n      for (const directory of checkedDirectories) {\n        parseSettings.tsconfigMatchCache.set(directory, cached);\n      }\n      return [cached];\n    }\n    directory = path.dirname(directory);\n    checkedDirectories.push(directory);\n  } while (directory.length > 1 && directory.length >= parseSettings.tsconfigRootDir.length);\n  throw new Error(`project was set to \\`true\\` but couldn't find any tsconfig.json relative to '${parseSettings.filePath}' within '${parseSettings.tsconfigRootDir}'.`);\n}\nexports.getProjectConfigFiles = getProjectConfigFiles;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAIA,MAAMA,GAAG,GAAG,mBAAK,EAAC,2DAA2D,CAAC;AAE9E;;;;;;;;;AASA,SAAgBC,qBAAqBA,CACnCC,aAGC,EACDC,OAA6C;;EAE7C,IAAIA,OAAO,KAAK,IAAI,EAAE;IACpB,OAAOA,OAAO,KAAKC,SAAS,IAAIC,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,GAClDA,OAAO,GACP,CAACA,OAAO,CAAC;;EAGfH,GAAG,CAAC,gDAAgD,EAAEE,aAAa,CAACK,QAAQ,CAAC;EAC7E,IAAIC,SAAS,GAAGC,IAAI,CAACC,OAAO,CAACR,aAAa,CAACK,QAAQ,CAAC;EACpD,MAAMI,kBAAkB,GAAG,CAACH,SAAS,CAAC;EAEtC,GAAG;IACDR,GAAG,CAAC,iCAAiC,EAAEQ,SAAS,CAAC;IACjD,MAAMI,YAAY,GAAGH,IAAI,CAACI,IAAI,CAACL,SAAS,EAAE,eAAe,CAAC;IAC1D,MAAMM,MAAM,GACV,mBAAa,CAACC,kBAAkB,CAACC,GAAG,CAACR,SAAS,CAAC,mCAC9CS,EAAE,CAACC,UAAU,CAACN,YAAY,CAAC,IAAIA,YAAa;IAE/C,IAAIE,MAAM,EAAE;MACV,KAAK,MAAMN,SAAS,IAAIG,kBAAkB,EAAE;QAC1CT,aAAa,CAACa,kBAAkB,CAACI,GAAG,CAACX,SAAS,EAAEM,MAAM,CAAC;;MAEzD,OAAO,CAACA,MAAM,CAAC;;IAGjBN,SAAS,GAAGC,IAAI,CAACC,OAAO,CAACF,SAAS,CAAC;IACnCG,kBAAkB,CAACS,IAAI,CAACZ,SAAS,CAAC;GACnC,QACCA,SAAS,CAACa,MAAM,GAAG,CAAC,IACpBb,SAAS,CAACa,MAAM,IAAInB,aAAa,CAACoB,eAAe,CAACD,MAAM;EAG1D,MAAM,IAAIE,KAAK,CACb,gFAAgFrB,aAAa,CAACK,QAAQ,aAAaL,aAAa,CAACoB,eAAe,IAAI,CACrJ;AACH;AAzCAE","names":["log","getProjectConfigFiles","parseSettings","project","undefined","Array","isArray","filePath","directory","path","dirname","checkedDirectories","tsconfigPath","join","cached","tsconfigMatchCache","get","fs","existsSync","set","push","length","tsconfigRootDir","Error","exports"],"sources":["../../src/parseSettings/getProjectConfigFiles.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}